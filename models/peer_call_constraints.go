// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeerCallConstraints peer call constraints
// swagger:model PeerCallConstraints
type PeerCallConstraints struct {

	// Audioを転送するかどうか指定します
	// Required: true
	Audio *bool `json:"audio"`

	// audio receive enabled
	AudioReceiveEnabled bool `json:"audioReceiveEnabled,omitempty"`

	// audio params
	AudioParams *PeerAudioParameters `json:"audio_params,omitempty"`

	// Videoを転送するかどうか指定します
	// Required: true
	Video *bool `json:"video"`

	// video receive enabled
	VideoReceiveEnabled bool `json:"videoReceiveEnabled,omitempty"`

	// video params
	VideoParams *PeerVideoParameters `json:"video_params,omitempty"`
}

// Validate validates this peer call constraints
func (m *PeerCallConstraints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAudioParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerCallConstraints) validateAudio(formats strfmt.Registry) error {

	if err := validate.Required("audio", "body", m.Audio); err != nil {
		return err
	}

	return nil
}

func (m *PeerCallConstraints) validateAudioParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AudioParams) { // not required
		return nil
	}

	if m.AudioParams != nil {
		if err := m.AudioParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audio_params")
			}
			return err
		}
	}

	return nil
}

func (m *PeerCallConstraints) validateVideo(formats strfmt.Registry) error {

	if err := validate.Required("video", "body", m.Video); err != nil {
		return err
	}

	return nil
}

func (m *PeerCallConstraints) validateVideoParams(formats strfmt.Registry) error {

	if swag.IsZero(m.VideoParams) { // not required
		return nil
	}

	if m.VideoParams != nil {
		if err := m.VideoParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeerCallConstraints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerCallConstraints) UnmarshalBinary(b []byte) error {
	var res PeerCallConstraints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
