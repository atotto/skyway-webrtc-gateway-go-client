// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeerResponse peer response
// swagger:model PeerResponse
type PeerResponse struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *PeerResponseParams `json:"params"`
}

// Validate validates this peer response
func (m *PeerResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerResponse) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("command_type", "body", m.CommandType); err != nil {
		return err
	}

	return nil
}

func (m *PeerResponse) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("params", "body", m.Params); err != nil {
		return err
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeerResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerResponse) UnmarshalBinary(b []byte) error {
	var res PeerResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeerResponseParams peer response params
// swagger:model PeerResponseParams
type PeerResponseParams struct {

	// 他のピアがこのピアへ接続するときに使われるIDです。Peerオブジェクトの特定にも利用します
	// Required: true
	PeerID *string `json:"peer_id"`

	// Peerオブジェクトを利用するために必要なトークンです。他のユーザのリソースに対する誤操作防止のために指定します
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this peer response params
func (m *PeerResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerResponseParams) validatePeerID(formats strfmt.Registry) error {

	if err := validate.Required("params"+"."+"peer_id", "body", m.PeerID); err != nil {
		return err
	}

	return nil
}

func (m *PeerResponseParams) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("params"+"."+"token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeerResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerResponseParams) UnmarshalBinary(b []byte) error {
	var res PeerResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
