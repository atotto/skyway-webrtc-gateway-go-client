// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MediaConnectionEventMessage media connection event message
// swagger:model MediaConnectionEventMessage
type MediaConnectionEventMessage struct {

	// close options
	CloseOptions interface{} `json:"close_options,omitempty"`

	// エラーの内容を示します
	ErrorMessage string `json:"error_message,omitempty"`

	// イベントの種別を示します
	// Required: true
	// Enum: [READY STREAM CLOSE ERROR]
	Event *string `json:"event"`

	// stream options
	StreamOptions *MediaConnectionEventMessageStreamOptions `json:"stream_options,omitempty"`
}

// Validate validates this media connection event message
func (m *MediaConnectionEventMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mediaConnectionEventMessageTypeEventPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READY","STREAM","CLOSE","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mediaConnectionEventMessageTypeEventPropEnum = append(mediaConnectionEventMessageTypeEventPropEnum, v)
	}
}

const (

	// MediaConnectionEventMessageEventREADY captures enum value "READY"
	MediaConnectionEventMessageEventREADY string = "READY"

	// MediaConnectionEventMessageEventSTREAM captures enum value "STREAM"
	MediaConnectionEventMessageEventSTREAM string = "STREAM"

	// MediaConnectionEventMessageEventCLOSE captures enum value "CLOSE"
	MediaConnectionEventMessageEventCLOSE string = "CLOSE"

	// MediaConnectionEventMessageEventERROR captures enum value "ERROR"
	MediaConnectionEventMessageEventERROR string = "ERROR"
)

// prop value enum
func (m *MediaConnectionEventMessage) validateEventEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mediaConnectionEventMessageTypeEventPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MediaConnectionEventMessage) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event); err != nil {
		return err
	}

	// value enum
	if err := m.validateEventEnum("event", "body", *m.Event); err != nil {
		return err
	}

	return nil
}

func (m *MediaConnectionEventMessage) validateStreamOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.StreamOptions) { // not required
		return nil
	}

	if m.StreamOptions != nil {
		if err := m.StreamOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stream_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaConnectionEventMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaConnectionEventMessage) UnmarshalBinary(b []byte) error {
	var res MediaConnectionEventMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MediaConnectionEventMessageStreamOptions streamの内容を示します。streamイベントのときのみ含まれます
// swagger:model MediaConnectionEventMessageStreamOptions
type MediaConnectionEventMessageStreamOptions struct {

	// videoの場合にtrue, audioの場合にfalseを指定します
	// Required: true
	IsVideo *bool `json:"is_video"`

	// stream params
	StreamParams *MediaParameters `json:"stream_params,omitempty"`
}

// Validate validates this media connection event message stream options
func (m *MediaConnectionEventMessageStreamOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsVideo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MediaConnectionEventMessageStreamOptions) validateIsVideo(formats strfmt.Registry) error {

	if err := validate.Required("stream_options"+"."+"is_video", "body", m.IsVideo); err != nil {
		return err
	}

	return nil
}

func (m *MediaConnectionEventMessageStreamOptions) validateStreamParams(formats strfmt.Registry) error {

	if swag.IsZero(m.StreamParams) { // not required
		return nil
	}

	if m.StreamParams != nil {
		if err := m.StreamParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stream_options" + "." + "stream_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaConnectionEventMessageStreamOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaConnectionEventMessageStreamOptions) UnmarshalBinary(b []byte) error {
	var res MediaConnectionEventMessageStreamOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
