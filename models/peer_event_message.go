// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeerEventMessage peer event message
// swagger:model PeerEventMessage
type PeerEventMessage struct {

	// call params
	CallParams *CallParametsers `json:"call_params,omitempty"`

	// data params
	DataParams *DataParametsers `json:"data_params,omitempty"`

	// エラーの内容を示します
	// Enum: [BROWSER_INCOMPATIBLE INVALID_ID INVALID_KEY UNAVAILABLE_ID SSL_UNAVAILABLE SERVER_DISCONNECTED SERVER_ERROR SOCKET_ERROR SOCKET_CLOSED]
	ErrorMessage string `json:"error_message,omitempty"`

	// イベントの種別を示します
	// Required: true
	// Enum: [OPEN CONNECTION CALL CLOSE EXPIRESIN ERROR]
	Event *string `json:"event"`

	// params
	Params *PeerParametsers `json:"params,omitempty"`

	// expiresinイベントのときのみ含まれます。クレデンシャルが失効するまでの時間(秒)です
	RemainingSec int64 `json:"remainingSec,omitempty"`
}

// Validate validates this peer event message
func (m *PeerEventMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerEventMessage) validateCallParams(formats strfmt.Registry) error {

	if swag.IsZero(m.CallParams) { // not required
		return nil
	}

	if m.CallParams != nil {
		if err := m.CallParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call_params")
			}
			return err
		}
	}

	return nil
}

func (m *PeerEventMessage) validateDataParams(formats strfmt.Registry) error {

	if swag.IsZero(m.DataParams) { // not required
		return nil
	}

	if m.DataParams != nil {
		if err := m.DataParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_params")
			}
			return err
		}
	}

	return nil
}

var peerEventMessageTypeErrorMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BROWSER_INCOMPATIBLE","INVALID_ID","INVALID_KEY","UNAVAILABLE_ID","SSL_UNAVAILABLE","SERVER_DISCONNECTED","SERVER_ERROR","SOCKET_ERROR","SOCKET_CLOSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		peerEventMessageTypeErrorMessagePropEnum = append(peerEventMessageTypeErrorMessagePropEnum, v)
	}
}

const (

	// PeerEventMessageErrorMessageBROWSERINCOMPATIBLE captures enum value "BROWSER_INCOMPATIBLE"
	PeerEventMessageErrorMessageBROWSERINCOMPATIBLE string = "BROWSER_INCOMPATIBLE"

	// PeerEventMessageErrorMessageINVALIDID captures enum value "INVALID_ID"
	PeerEventMessageErrorMessageINVALIDID string = "INVALID_ID"

	// PeerEventMessageErrorMessageINVALIDKEY captures enum value "INVALID_KEY"
	PeerEventMessageErrorMessageINVALIDKEY string = "INVALID_KEY"

	// PeerEventMessageErrorMessageUNAVAILABLEID captures enum value "UNAVAILABLE_ID"
	PeerEventMessageErrorMessageUNAVAILABLEID string = "UNAVAILABLE_ID"

	// PeerEventMessageErrorMessageSSLUNAVAILABLE captures enum value "SSL_UNAVAILABLE"
	PeerEventMessageErrorMessageSSLUNAVAILABLE string = "SSL_UNAVAILABLE"

	// PeerEventMessageErrorMessageSERVERDISCONNECTED captures enum value "SERVER_DISCONNECTED"
	PeerEventMessageErrorMessageSERVERDISCONNECTED string = "SERVER_DISCONNECTED"

	// PeerEventMessageErrorMessageSERVERERROR captures enum value "SERVER_ERROR"
	PeerEventMessageErrorMessageSERVERERROR string = "SERVER_ERROR"

	// PeerEventMessageErrorMessageSOCKETERROR captures enum value "SOCKET_ERROR"
	PeerEventMessageErrorMessageSOCKETERROR string = "SOCKET_ERROR"

	// PeerEventMessageErrorMessageSOCKETCLOSED captures enum value "SOCKET_CLOSED"
	PeerEventMessageErrorMessageSOCKETCLOSED string = "SOCKET_CLOSED"
)

// prop value enum
func (m *PeerEventMessage) validateErrorMessageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, peerEventMessageTypeErrorMessagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PeerEventMessage) validateErrorMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorMessage) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorMessageEnum("error_message", "body", m.ErrorMessage); err != nil {
		return err
	}

	return nil
}

var peerEventMessageTypeEventPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","CONNECTION","CALL","CLOSE","EXPIRESIN","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		peerEventMessageTypeEventPropEnum = append(peerEventMessageTypeEventPropEnum, v)
	}
}

const (

	// PeerEventMessageEventOPEN captures enum value "OPEN"
	PeerEventMessageEventOPEN string = "OPEN"

	// PeerEventMessageEventCONNECTION captures enum value "CONNECTION"
	PeerEventMessageEventCONNECTION string = "CONNECTION"

	// PeerEventMessageEventCALL captures enum value "CALL"
	PeerEventMessageEventCALL string = "CALL"

	// PeerEventMessageEventCLOSE captures enum value "CLOSE"
	PeerEventMessageEventCLOSE string = "CLOSE"

	// PeerEventMessageEventEXPIRESIN captures enum value "EXPIRESIN"
	PeerEventMessageEventEXPIRESIN string = "EXPIRESIN"

	// PeerEventMessageEventERROR captures enum value "ERROR"
	PeerEventMessageEventERROR string = "ERROR"
)

// prop value enum
func (m *PeerEventMessage) validateEventEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, peerEventMessageTypeEventPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PeerEventMessage) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event); err != nil {
		return err
	}

	// value enum
	if err := m.validateEventEnum("event", "body", *m.Event); err != nil {
		return err
	}

	return nil
}

func (m *PeerEventMessage) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeerEventMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerEventMessage) UnmarshalBinary(b []byte) error {
	var res PeerEventMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
