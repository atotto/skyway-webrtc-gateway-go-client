// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeerConnectResponse peer connect response
// swagger:model PeerConnectResponse
type PeerConnectResponse struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *PeerConnectResponseParams `json:"params"`
}

// Validate validates this peer connect response
func (m *PeerConnectResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerConnectResponse) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("command_type", "body", m.CommandType); err != nil {
		return err
	}

	return nil
}

func (m *PeerConnectResponse) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("params", "body", m.Params); err != nil {
		return err
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeerConnectResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerConnectResponse) UnmarshalBinary(b []byte) error {
	var res PeerConnectResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeerConnectResponseParams peer connect response params
// swagger:model PeerConnectResponseParams
type PeerConnectResponseParams struct {

	// DataConnectionを特定するためのIDです
	// Required: true
	DataConnectionID *string `json:"data_connection_id"`
}

// Validate validates this peer connect response params
func (m *PeerConnectResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataConnectionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerConnectResponseParams) validateDataConnectionID(formats strfmt.Registry) error {

	if err := validate.Required("params"+"."+"data_connection_id", "body", m.DataConnectionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeerConnectResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerConnectResponseParams) UnmarshalBinary(b []byte) error {
	var res PeerConnectResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
