// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MediaAnswerRedirectOptions media answer redirect options
// swagger:model MediaAnswerRedirectOptions
type MediaAnswerRedirectOptions struct {

	// audio
	Audio *MediaAnswerRedirectOptionsAudio `json:"audio,omitempty"`

	// audio rtcp
	AudioRtcp *MediaAnswerRedirectOptionsAudioRtcp `json:"audio_rtcp,omitempty"`

	// video
	Video *MediaAnswerRedirectOptionsVideo `json:"video,omitempty"`

	// video rtcp
	VideoRtcp *MediaAnswerRedirectOptionsVideoRtcp `json:"video_rtcp,omitempty"`
}

// Validate validates this media answer redirect options
func (m *MediaAnswerRedirectOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAudioRtcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoRtcp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MediaAnswerRedirectOptions) validateAudio(formats strfmt.Registry) error {

	if swag.IsZero(m.Audio) { // not required
		return nil
	}

	if m.Audio != nil {
		if err := m.Audio.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audio")
			}
			return err
		}
	}

	return nil
}

func (m *MediaAnswerRedirectOptions) validateAudioRtcp(formats strfmt.Registry) error {

	if swag.IsZero(m.AudioRtcp) { // not required
		return nil
	}

	if m.AudioRtcp != nil {
		if err := m.AudioRtcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audio_rtcp")
			}
			return err
		}
	}

	return nil
}

func (m *MediaAnswerRedirectOptions) validateVideo(formats strfmt.Registry) error {

	if swag.IsZero(m.Video) { // not required
		return nil
	}

	if m.Video != nil {
		if err := m.Video.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video")
			}
			return err
		}
	}

	return nil
}

func (m *MediaAnswerRedirectOptions) validateVideoRtcp(formats strfmt.Registry) error {

	if swag.IsZero(m.VideoRtcp) { // not required
		return nil
	}

	if m.VideoRtcp != nil {
		if err := m.VideoRtcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video_rtcp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaAnswerRedirectOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaAnswerRedirectOptions) UnmarshalBinary(b []byte) error {
	var res MediaAnswerRedirectOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MediaAnswerRedirectOptionsAudio media answer redirect options audio
// swagger:model MediaAnswerRedirectOptionsAudio
type MediaAnswerRedirectOptionsAudio struct {

	// Mediaの転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Mediaの転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this media answer redirect options audio
func (m *MediaAnswerRedirectOptionsAudio) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsAudio) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsAudio) UnmarshalBinary(b []byte) error {
	var res MediaAnswerRedirectOptionsAudio
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MediaAnswerRedirectOptionsAudioRtcp media answer redirect options audio rtcp
// swagger:model MediaAnswerRedirectOptionsAudioRtcp
type MediaAnswerRedirectOptionsAudioRtcp struct {

	// Audioに対応するRTCP情報の転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Audioに対応するRTCP情報の転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this media answer redirect options audio rtcp
func (m *MediaAnswerRedirectOptionsAudioRtcp) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsAudioRtcp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsAudioRtcp) UnmarshalBinary(b []byte) error {
	var res MediaAnswerRedirectOptionsAudioRtcp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MediaAnswerRedirectOptionsVideo media answer redirect options video
// swagger:model MediaAnswerRedirectOptionsVideo
type MediaAnswerRedirectOptionsVideo struct {

	// Mediaの転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Mediaの転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this media answer redirect options video
func (m *MediaAnswerRedirectOptionsVideo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsVideo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsVideo) UnmarshalBinary(b []byte) error {
	var res MediaAnswerRedirectOptionsVideo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MediaAnswerRedirectOptionsVideoRtcp media answer redirect options video rtcp
// swagger:model MediaAnswerRedirectOptionsVideoRtcp
type MediaAnswerRedirectOptionsVideoRtcp struct {

	// Videoに対応するRTCP情報の転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Videoに対応するRTCP情報の転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this media answer redirect options video rtcp
func (m *MediaAnswerRedirectOptionsVideoRtcp) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsVideoRtcp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaAnswerRedirectOptionsVideoRtcp) UnmarshalBinary(b []byte) error {
	var res MediaAnswerRedirectOptionsVideoRtcp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
