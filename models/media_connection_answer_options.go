// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MediaConnectionAnswerOptions media connection answer options
// swagger:model MediaConnectionAnswerOptions
type MediaConnectionAnswerOptions struct {

	// constraints
	// Required: true
	Constraints *PeerCallConstraints `json:"constraints"`

	// redirect params
	RedirectParams *MediaRedirectOptions `json:"redirect_params,omitempty"`
}

// Validate validates this media connection answer options
func (m *MediaConnectionAnswerOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MediaConnectionAnswerOptions) validateConstraints(formats strfmt.Registry) error {

	if err := validate.Required("constraints", "body", m.Constraints); err != nil {
		return err
	}

	if m.Constraints != nil {
		if err := m.Constraints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constraints")
			}
			return err
		}
	}

	return nil
}

func (m *MediaConnectionAnswerOptions) validateRedirectParams(formats strfmt.Registry) error {

	if swag.IsZero(m.RedirectParams) { // not required
		return nil
	}

	if m.RedirectParams != nil {
		if err := m.RedirectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirect_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaConnectionAnswerOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaConnectionAnswerOptions) UnmarshalBinary(b []byte) error {
	var res MediaConnectionAnswerOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
