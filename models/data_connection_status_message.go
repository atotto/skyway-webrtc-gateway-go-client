// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataConnectionStatusMessage data connection status message
// swagger:model DataConnectionStatusMessage
type DataConnectionStatusMessage struct {

	// ブラウザのバッファが一杯になった場合に、キューされるメッセージのサイズです。
	// Required: true
	Buffersize *int64 `json:"buffersize"`

	// コネクションが開始されたときにPeerJSからアサインされる、または指定されるオプションのラベルです。
	// Required: true
	Label *string `json:"label"`

	// コネクションが開始されたときに、コネクションと関連付けされるメタデータです。
	// Required: true
	Metadata interface{} `json:"metadata"`

	// コネクションがopenであり、読み込み/書き込みの準備ができている場合にtrueになります。
	// Required: true
	Open *bool `json:"open"`

	// 信頼性のあるdata channelの場合にtrueです。コネクションの開始時に定義されます。
	// Required: true
	Reliable *bool `json:"reliable"`

	// コネクションの相手側のpeer_idです
	RemoteID string `json:"remote_id,omitempty"`

	// コネクションを通じて送信されるデータのserializeフォーマットです。BINARY (デフォルト値)、 BINARY_UTF8、 JSON、 または NONE となります。
	// Required: true
	Serialization *string `json:"serialization"`

	// 常に'DATA'が設定されます
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this data connection status message
func (m *DataConnectionStatusMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuffersize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReliable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataConnectionStatusMessage) validateBuffersize(formats strfmt.Registry) error {

	if err := validate.Required("buffersize", "body", m.Buffersize); err != nil {
		return err
	}

	return nil
}

func (m *DataConnectionStatusMessage) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *DataConnectionStatusMessage) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	return nil
}

func (m *DataConnectionStatusMessage) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("open", "body", m.Open); err != nil {
		return err
	}

	return nil
}

func (m *DataConnectionStatusMessage) validateReliable(formats strfmt.Registry) error {

	if err := validate.Required("reliable", "body", m.Reliable); err != nil {
		return err
	}

	return nil
}

func (m *DataConnectionStatusMessage) validateSerialization(formats strfmt.Registry) error {

	if err := validate.Required("serialization", "body", m.Serialization); err != nil {
		return err
	}

	return nil
}

func (m *DataConnectionStatusMessage) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataConnectionStatusMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataConnectionStatusMessage) UnmarshalBinary(b []byte) error {
	var res DataConnectionStatusMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
