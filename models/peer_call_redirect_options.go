// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PeerCallRedirectOptions peer call redirect options
// swagger:model PeerCallRedirectOptions
type PeerCallRedirectOptions struct {

	// audio
	Audio *PeerCallRedirectOptionsAudio `json:"audio,omitempty"`

	// audio rtcp
	AudioRtcp *PeerCallRedirectOptionsAudioRtcp `json:"audio_rtcp,omitempty"`

	// video
	Video *PeerCallRedirectOptionsVideo `json:"video,omitempty"`

	// video rtcp
	VideoRtcp *PeerCallRedirectOptionsVideoRtcp `json:"video_rtcp,omitempty"`
}

// Validate validates this peer call redirect options
func (m *PeerCallRedirectOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAudioRtcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoRtcp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerCallRedirectOptions) validateAudio(formats strfmt.Registry) error {

	if swag.IsZero(m.Audio) { // not required
		return nil
	}

	if m.Audio != nil {
		if err := m.Audio.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audio")
			}
			return err
		}
	}

	return nil
}

func (m *PeerCallRedirectOptions) validateAudioRtcp(formats strfmt.Registry) error {

	if swag.IsZero(m.AudioRtcp) { // not required
		return nil
	}

	if m.AudioRtcp != nil {
		if err := m.AudioRtcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audio_rtcp")
			}
			return err
		}
	}

	return nil
}

func (m *PeerCallRedirectOptions) validateVideo(formats strfmt.Registry) error {

	if swag.IsZero(m.Video) { // not required
		return nil
	}

	if m.Video != nil {
		if err := m.Video.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video")
			}
			return err
		}
	}

	return nil
}

func (m *PeerCallRedirectOptions) validateVideoRtcp(formats strfmt.Registry) error {

	if swag.IsZero(m.VideoRtcp) { // not required
		return nil
	}

	if m.VideoRtcp != nil {
		if err := m.VideoRtcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video_rtcp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeerCallRedirectOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerCallRedirectOptions) UnmarshalBinary(b []byte) error {
	var res PeerCallRedirectOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeerCallRedirectOptionsAudio peer call redirect options audio
// swagger:model PeerCallRedirectOptionsAudio
type PeerCallRedirectOptionsAudio struct {

	// Mediaの転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Mediaの転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this peer call redirect options audio
func (m *PeerCallRedirectOptionsAudio) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PeerCallRedirectOptionsAudio) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerCallRedirectOptionsAudio) UnmarshalBinary(b []byte) error {
	var res PeerCallRedirectOptionsAudio
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeerCallRedirectOptionsAudioRtcp peer call redirect options audio rtcp
// swagger:model PeerCallRedirectOptionsAudioRtcp
type PeerCallRedirectOptionsAudioRtcp struct {

	// Audioに対応するRTCP情報の転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Audioに対応するRTCP情報の転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this peer call redirect options audio rtcp
func (m *PeerCallRedirectOptionsAudioRtcp) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PeerCallRedirectOptionsAudioRtcp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerCallRedirectOptionsAudioRtcp) UnmarshalBinary(b []byte) error {
	var res PeerCallRedirectOptionsAudioRtcp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeerCallRedirectOptionsVideo peer call redirect options video
// swagger:model PeerCallRedirectOptionsVideo
type PeerCallRedirectOptionsVideo struct {

	// Mediaの転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Mediaの転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this peer call redirect options video
func (m *PeerCallRedirectOptionsVideo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PeerCallRedirectOptionsVideo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerCallRedirectOptionsVideo) UnmarshalBinary(b []byte) error {
	var res PeerCallRedirectOptionsVideo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeerCallRedirectOptionsVideoRtcp peer call redirect options video rtcp
// swagger:model PeerCallRedirectOptionsVideoRtcp
type PeerCallRedirectOptionsVideoRtcp struct {

	// Videoに対応するRTCP情報の転送先IPv4アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV4 string `json:"ip_v4,omitempty"`

	// Videoに対応するRTCP情報の転送先IPv6アドレスを指定します。ip_v4またはip_v6アドレスのいずれかの情報は必須です。両方が指定された場合はip_v4が優先されます
	IPV6 string `json:"ip_v6,omitempty"`

	// port
	Port uint16 `json:"port,omitempty"`
}

// Validate validates this peer call redirect options video rtcp
func (m *PeerCallRedirectOptionsVideoRtcp) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PeerCallRedirectOptionsVideoRtcp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerCallRedirectOptionsVideoRtcp) UnmarshalBinary(b []byte) error {
	var res PeerCallRedirectOptionsVideoRtcp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
