// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// DataConnectionEventsReader is a Reader for the DataConnectionEvents structure.
type DataConnectionEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DataConnectionEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDataConnectionEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDataConnectionEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDataConnectionEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDataConnectionEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewDataConnectionEventsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewDataConnectionEventsNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewDataConnectionEventsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDataConnectionEventsOK creates a DataConnectionEventsOK with default headers values
func NewDataConnectionEventsOK() *DataConnectionEventsOK {
	return &DataConnectionEventsOK{}
}

/*DataConnectionEventsOK handles this case with default header values.

successful operation
*/
type DataConnectionEventsOK struct {
	Payload *models.DataConnectionEventMessage
}

func (o *DataConnectionEventsOK) Error() string {
	return fmt.Sprintf("[GET /data/connections/{data_connection_id}/events][%d] dataConnectionEventsOK  %+v", 200, o.Payload)
}

func (o *DataConnectionEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataConnectionEventMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDataConnectionEventsBadRequest creates a DataConnectionEventsBadRequest with default headers values
func NewDataConnectionEventsBadRequest() *DataConnectionEventsBadRequest {
	return &DataConnectionEventsBadRequest{}
}

/*DataConnectionEventsBadRequest handles this case with default header values.

Invalid input
*/
type DataConnectionEventsBadRequest struct {
	Payload *DataConnectionEventsBadRequestBody
}

func (o *DataConnectionEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /data/connections/{data_connection_id}/events][%d] dataConnectionEventsBadRequest  %+v", 400, o.Payload)
}

func (o *DataConnectionEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DataConnectionEventsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDataConnectionEventsForbidden creates a DataConnectionEventsForbidden with default headers values
func NewDataConnectionEventsForbidden() *DataConnectionEventsForbidden {
	return &DataConnectionEventsForbidden{}
}

/*DataConnectionEventsForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type DataConnectionEventsForbidden struct {
}

func (o *DataConnectionEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /data/connections/{data_connection_id}/events][%d] dataConnectionEventsForbidden ", 403)
}

func (o *DataConnectionEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionEventsNotFound creates a DataConnectionEventsNotFound with default headers values
func NewDataConnectionEventsNotFound() *DataConnectionEventsNotFound {
	return &DataConnectionEventsNotFound{}
}

/*DataConnectionEventsNotFound handles this case with default header values.

Not Found(data_connection_idが間違っている場合)
*/
type DataConnectionEventsNotFound struct {
}

func (o *DataConnectionEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /data/connections/{data_connection_id}/events][%d] dataConnectionEventsNotFound ", 404)
}

func (o *DataConnectionEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionEventsMethodNotAllowed creates a DataConnectionEventsMethodNotAllowed with default headers values
func NewDataConnectionEventsMethodNotAllowed() *DataConnectionEventsMethodNotAllowed {
	return &DataConnectionEventsMethodNotAllowed{}
}

/*DataConnectionEventsMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type DataConnectionEventsMethodNotAllowed struct {
}

func (o *DataConnectionEventsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /data/connections/{data_connection_id}/events][%d] dataConnectionEventsMethodNotAllowed ", 405)
}

func (o *DataConnectionEventsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionEventsNotAcceptable creates a DataConnectionEventsNotAcceptable with default headers values
func NewDataConnectionEventsNotAcceptable() *DataConnectionEventsNotAcceptable {
	return &DataConnectionEventsNotAcceptable{}
}

/*DataConnectionEventsNotAcceptable handles this case with default header values.

Not Acceptable
*/
type DataConnectionEventsNotAcceptable struct {
}

func (o *DataConnectionEventsNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /data/connections/{data_connection_id}/events][%d] dataConnectionEventsNotAcceptable ", 406)
}

func (o *DataConnectionEventsNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionEventsRequestTimeout creates a DataConnectionEventsRequestTimeout with default headers values
func NewDataConnectionEventsRequestTimeout() *DataConnectionEventsRequestTimeout {
	return &DataConnectionEventsRequestTimeout{}
}

/*DataConnectionEventsRequestTimeout handles this case with default header values.

Request Timeout
*/
type DataConnectionEventsRequestTimeout struct {
}

func (o *DataConnectionEventsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /data/connections/{data_connection_id}/events][%d] dataConnectionEventsRequestTimeout ", 408)
}

func (o *DataConnectionEventsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DataConnectionEventsBadRequestBody data connection events bad request body
swagger:model DataConnectionEventsBadRequestBody
*/
type DataConnectionEventsBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *DataConnectionEventsBadRequestBodyParams `json:"params"`
}

// Validate validates this data connection events bad request body
func (o *DataConnectionEventsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataConnectionEventsBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionEventsBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *DataConnectionEventsBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionEventsBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataConnectionEventsBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionEventsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionEventsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DataConnectionEventsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DataConnectionEventsBadRequestBodyParams data connection events bad request body params
swagger:model DataConnectionEventsBadRequestBodyParams
*/
type DataConnectionEventsBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*DataConnectionEventsBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this data connection events bad request body params
func (o *DataConnectionEventsBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataConnectionEventsBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionEventsBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataConnectionEventsBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionEventsBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionEventsBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res DataConnectionEventsBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DataConnectionEventsBadRequestBodyParamsErrorsItems0 data connection events bad request body params errors items0
swagger:model DataConnectionEventsBadRequestBodyParamsErrorsItems0
*/
type DataConnectionEventsBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this data connection events bad request body params errors items0
func (o *DataConnectionEventsBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionEventsBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionEventsBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DataConnectionEventsBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
