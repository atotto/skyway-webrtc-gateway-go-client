// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// DataConnectionCloseReader is a Reader for the DataConnectionClose structure.
type DataConnectionCloseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DataConnectionCloseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDataConnectionCloseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDataConnectionCloseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDataConnectionCloseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDataConnectionCloseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewDataConnectionCloseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewDataConnectionCloseNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewDataConnectionCloseRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDataConnectionCloseNoContent creates a DataConnectionCloseNoContent with default headers values
func NewDataConnectionCloseNoContent() *DataConnectionCloseNoContent {
	return &DataConnectionCloseNoContent{}
}

/*DataConnectionCloseNoContent handles this case with default header values.

No Content
*/
type DataConnectionCloseNoContent struct {
}

func (o *DataConnectionCloseNoContent) Error() string {
	return fmt.Sprintf("[DELETE /data/connections/{data_connection_id}][%d] dataConnectionCloseNoContent ", 204)
}

func (o *DataConnectionCloseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionCloseBadRequest creates a DataConnectionCloseBadRequest with default headers values
func NewDataConnectionCloseBadRequest() *DataConnectionCloseBadRequest {
	return &DataConnectionCloseBadRequest{}
}

/*DataConnectionCloseBadRequest handles this case with default header values.

Invalid input
*/
type DataConnectionCloseBadRequest struct {
	Payload *DataConnectionCloseBadRequestBody
}

func (o *DataConnectionCloseBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /data/connections/{data_connection_id}][%d] dataConnectionCloseBadRequest  %+v", 400, o.Payload)
}

func (o *DataConnectionCloseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DataConnectionCloseBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDataConnectionCloseForbidden creates a DataConnectionCloseForbidden with default headers values
func NewDataConnectionCloseForbidden() *DataConnectionCloseForbidden {
	return &DataConnectionCloseForbidden{}
}

/*DataConnectionCloseForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type DataConnectionCloseForbidden struct {
}

func (o *DataConnectionCloseForbidden) Error() string {
	return fmt.Sprintf("[DELETE /data/connections/{data_connection_id}][%d] dataConnectionCloseForbidden ", 403)
}

func (o *DataConnectionCloseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionCloseNotFound creates a DataConnectionCloseNotFound with default headers values
func NewDataConnectionCloseNotFound() *DataConnectionCloseNotFound {
	return &DataConnectionCloseNotFound{}
}

/*DataConnectionCloseNotFound handles this case with default header values.

Not Found(data_idが間違っている場合)
*/
type DataConnectionCloseNotFound struct {
}

func (o *DataConnectionCloseNotFound) Error() string {
	return fmt.Sprintf("[DELETE /data/connections/{data_connection_id}][%d] dataConnectionCloseNotFound ", 404)
}

func (o *DataConnectionCloseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionCloseMethodNotAllowed creates a DataConnectionCloseMethodNotAllowed with default headers values
func NewDataConnectionCloseMethodNotAllowed() *DataConnectionCloseMethodNotAllowed {
	return &DataConnectionCloseMethodNotAllowed{}
}

/*DataConnectionCloseMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type DataConnectionCloseMethodNotAllowed struct {
}

func (o *DataConnectionCloseMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /data/connections/{data_connection_id}][%d] dataConnectionCloseMethodNotAllowed ", 405)
}

func (o *DataConnectionCloseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionCloseNotAcceptable creates a DataConnectionCloseNotAcceptable with default headers values
func NewDataConnectionCloseNotAcceptable() *DataConnectionCloseNotAcceptable {
	return &DataConnectionCloseNotAcceptable{}
}

/*DataConnectionCloseNotAcceptable handles this case with default header values.

Not Acceptable
*/
type DataConnectionCloseNotAcceptable struct {
}

func (o *DataConnectionCloseNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /data/connections/{data_connection_id}][%d] dataConnectionCloseNotAcceptable ", 406)
}

func (o *DataConnectionCloseNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionCloseRequestTimeout creates a DataConnectionCloseRequestTimeout with default headers values
func NewDataConnectionCloseRequestTimeout() *DataConnectionCloseRequestTimeout {
	return &DataConnectionCloseRequestTimeout{}
}

/*DataConnectionCloseRequestTimeout handles this case with default header values.

Request Timeout
*/
type DataConnectionCloseRequestTimeout struct {
}

func (o *DataConnectionCloseRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /data/connections/{data_connection_id}][%d] dataConnectionCloseRequestTimeout ", 408)
}

func (o *DataConnectionCloseRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DataConnectionCloseBadRequestBody data connection close bad request body
swagger:model DataConnectionCloseBadRequestBody
*/
type DataConnectionCloseBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *DataConnectionCloseBadRequestBodyParams `json:"params"`
}

// Validate validates this data connection close bad request body
func (o *DataConnectionCloseBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataConnectionCloseBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionCloseBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *DataConnectionCloseBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionCloseBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataConnectionCloseBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionCloseBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionCloseBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DataConnectionCloseBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DataConnectionCloseBadRequestBodyParams data connection close bad request body params
swagger:model DataConnectionCloseBadRequestBodyParams
*/
type DataConnectionCloseBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*DataConnectionCloseBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this data connection close bad request body params
func (o *DataConnectionCloseBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataConnectionCloseBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionCloseBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataConnectionCloseBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionCloseBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionCloseBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res DataConnectionCloseBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DataConnectionCloseBadRequestBodyParamsErrorsItems0 data connection close bad request body params errors items0
swagger:model DataConnectionCloseBadRequestBodyParamsErrorsItems0
*/
type DataConnectionCloseBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this data connection close bad request body params errors items0
func (o *DataConnectionCloseBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionCloseBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionCloseBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DataConnectionCloseBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
