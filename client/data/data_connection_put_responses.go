// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// DataConnectionPutReader is a Reader for the DataConnectionPut structure.
type DataConnectionPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DataConnectionPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDataConnectionPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDataConnectionPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDataConnectionPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDataConnectionPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewDataConnectionPutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewDataConnectionPutNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewDataConnectionPutRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDataConnectionPutOK creates a DataConnectionPutOK with default headers values
func NewDataConnectionPutOK() *DataConnectionPutOK {
	return &DataConnectionPutOK{}
}

/*DataConnectionPutOK handles this case with default header values.

Ok
*/
type DataConnectionPutOK struct {
	Payload *DataConnectionPutOKBody
}

func (o *DataConnectionPutOK) Error() string {
	return fmt.Sprintf("[PUT /data/connections/{data_connection_id}][%d] dataConnectionPutOK  %+v", 200, o.Payload)
}

func (o *DataConnectionPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DataConnectionPutOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDataConnectionPutBadRequest creates a DataConnectionPutBadRequest with default headers values
func NewDataConnectionPutBadRequest() *DataConnectionPutBadRequest {
	return &DataConnectionPutBadRequest{}
}

/*DataConnectionPutBadRequest handles this case with default header values.

Invalid input
*/
type DataConnectionPutBadRequest struct {
	Payload *DataConnectionPutBadRequestBody
}

func (o *DataConnectionPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /data/connections/{data_connection_id}][%d] dataConnectionPutBadRequest  %+v", 400, o.Payload)
}

func (o *DataConnectionPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DataConnectionPutBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDataConnectionPutForbidden creates a DataConnectionPutForbidden with default headers values
func NewDataConnectionPutForbidden() *DataConnectionPutForbidden {
	return &DataConnectionPutForbidden{}
}

/*DataConnectionPutForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type DataConnectionPutForbidden struct {
}

func (o *DataConnectionPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /data/connections/{data_connection_id}][%d] dataConnectionPutForbidden ", 403)
}

func (o *DataConnectionPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionPutNotFound creates a DataConnectionPutNotFound with default headers values
func NewDataConnectionPutNotFound() *DataConnectionPutNotFound {
	return &DataConnectionPutNotFound{}
}

/*DataConnectionPutNotFound handles this case with default header values.

Not Found(data_idが間違っている場合)
*/
type DataConnectionPutNotFound struct {
}

func (o *DataConnectionPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /data/connections/{data_connection_id}][%d] dataConnectionPutNotFound ", 404)
}

func (o *DataConnectionPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionPutMethodNotAllowed creates a DataConnectionPutMethodNotAllowed with default headers values
func NewDataConnectionPutMethodNotAllowed() *DataConnectionPutMethodNotAllowed {
	return &DataConnectionPutMethodNotAllowed{}
}

/*DataConnectionPutMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type DataConnectionPutMethodNotAllowed struct {
}

func (o *DataConnectionPutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /data/connections/{data_connection_id}][%d] dataConnectionPutMethodNotAllowed ", 405)
}

func (o *DataConnectionPutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionPutNotAcceptable creates a DataConnectionPutNotAcceptable with default headers values
func NewDataConnectionPutNotAcceptable() *DataConnectionPutNotAcceptable {
	return &DataConnectionPutNotAcceptable{}
}

/*DataConnectionPutNotAcceptable handles this case with default header values.

Not Acceptable
*/
type DataConnectionPutNotAcceptable struct {
}

func (o *DataConnectionPutNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /data/connections/{data_connection_id}][%d] dataConnectionPutNotAcceptable ", 406)
}

func (o *DataConnectionPutNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDataConnectionPutRequestTimeout creates a DataConnectionPutRequestTimeout with default headers values
func NewDataConnectionPutRequestTimeout() *DataConnectionPutRequestTimeout {
	return &DataConnectionPutRequestTimeout{}
}

/*DataConnectionPutRequestTimeout handles this case with default header values.

Request Timeout
*/
type DataConnectionPutRequestTimeout struct {
}

func (o *DataConnectionPutRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /data/connections/{data_connection_id}][%d] dataConnectionPutRequestTimeout ", 408)
}

func (o *DataConnectionPutRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DataConnectionPutBadRequestBody data connection put bad request body
swagger:model DataConnectionPutBadRequestBody
*/
type DataConnectionPutBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *DataConnectionPutBadRequestBodyParams `json:"params"`
}

// Validate validates this data connection put bad request body
func (o *DataConnectionPutBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataConnectionPutBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionPutBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *DataConnectionPutBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionPutBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataConnectionPutBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionPutBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionPutBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DataConnectionPutBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DataConnectionPutBadRequestBodyParams data connection put bad request body params
swagger:model DataConnectionPutBadRequestBodyParams
*/
type DataConnectionPutBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*DataConnectionPutBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this data connection put bad request body params
func (o *DataConnectionPutBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataConnectionPutBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("dataConnectionPutBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataConnectionPutBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionPutBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionPutBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res DataConnectionPutBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DataConnectionPutBadRequestBodyParamsErrorsItems0 data connection put bad request body params errors items0
swagger:model DataConnectionPutBadRequestBodyParamsErrorsItems0
*/
type DataConnectionPutBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this data connection put bad request body params errors items0
func (o *DataConnectionPutBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionPutBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionPutBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DataConnectionPutBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DataConnectionPutOKBody data connection put o k body
swagger:model DataConnectionPutOKBody
*/
type DataConnectionPutOKBody struct {

	// command type
	CommandType string `json:"command_type,omitempty"`

	// data id
	DataID string `json:"data_id,omitempty"`
}

// Validate validates this data connection put o k body
func (o *DataConnectionPutOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DataConnectionPutOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataConnectionPutOKBody) UnmarshalBinary(b []byte) error {
	var res DataConnectionPutOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
