// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// MediaConnectionEventReader is a Reader for the MediaConnectionEvent structure.
type MediaConnectionEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaConnectionEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewMediaConnectionEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaConnectionEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMediaConnectionEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMediaConnectionEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaConnectionEventMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaConnectionEventNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaConnectionEventRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaConnectionEventOK creates a MediaConnectionEventOK with default headers values
func NewMediaConnectionEventOK() *MediaConnectionEventOK {
	return &MediaConnectionEventOK{}
}

/*MediaConnectionEventOK handles this case with default header values.

successful operation
*/
type MediaConnectionEventOK struct {
	Payload *models.MediaConnectionEventMessage
}

func (o *MediaConnectionEventOK) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/events][%d] mediaConnectionEventOK  %+v", 200, o.Payload)
}

func (o *MediaConnectionEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MediaConnectionEventMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionEventBadRequest creates a MediaConnectionEventBadRequest with default headers values
func NewMediaConnectionEventBadRequest() *MediaConnectionEventBadRequest {
	return &MediaConnectionEventBadRequest{}
}

/*MediaConnectionEventBadRequest handles this case with default header values.

Invalid input
*/
type MediaConnectionEventBadRequest struct {
	Payload *MediaConnectionEventBadRequestBody
}

func (o *MediaConnectionEventBadRequest) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/events][%d] mediaConnectionEventBadRequest  %+v", 400, o.Payload)
}

func (o *MediaConnectionEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaConnectionEventBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionEventForbidden creates a MediaConnectionEventForbidden with default headers values
func NewMediaConnectionEventForbidden() *MediaConnectionEventForbidden {
	return &MediaConnectionEventForbidden{}
}

/*MediaConnectionEventForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type MediaConnectionEventForbidden struct {
}

func (o *MediaConnectionEventForbidden) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/events][%d] mediaConnectionEventForbidden ", 403)
}

func (o *MediaConnectionEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionEventNotFound creates a MediaConnectionEventNotFound with default headers values
func NewMediaConnectionEventNotFound() *MediaConnectionEventNotFound {
	return &MediaConnectionEventNotFound{}
}

/*MediaConnectionEventNotFound handles this case with default header values.

Not Found(media_connection_idが間違っている場合)
*/
type MediaConnectionEventNotFound struct {
}

func (o *MediaConnectionEventNotFound) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/events][%d] mediaConnectionEventNotFound ", 404)
}

func (o *MediaConnectionEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionEventMethodNotAllowed creates a MediaConnectionEventMethodNotAllowed with default headers values
func NewMediaConnectionEventMethodNotAllowed() *MediaConnectionEventMethodNotAllowed {
	return &MediaConnectionEventMethodNotAllowed{}
}

/*MediaConnectionEventMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaConnectionEventMethodNotAllowed struct {
}

func (o *MediaConnectionEventMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/events][%d] mediaConnectionEventMethodNotAllowed ", 405)
}

func (o *MediaConnectionEventMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionEventNotAcceptable creates a MediaConnectionEventNotAcceptable with default headers values
func NewMediaConnectionEventNotAcceptable() *MediaConnectionEventNotAcceptable {
	return &MediaConnectionEventNotAcceptable{}
}

/*MediaConnectionEventNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaConnectionEventNotAcceptable struct {
}

func (o *MediaConnectionEventNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/events][%d] mediaConnectionEventNotAcceptable ", 406)
}

func (o *MediaConnectionEventNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionEventRequestTimeout creates a MediaConnectionEventRequestTimeout with default headers values
func NewMediaConnectionEventRequestTimeout() *MediaConnectionEventRequestTimeout {
	return &MediaConnectionEventRequestTimeout{}
}

/*MediaConnectionEventRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaConnectionEventRequestTimeout struct {
}

func (o *MediaConnectionEventRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/events][%d] mediaConnectionEventRequestTimeout ", 408)
}

func (o *MediaConnectionEventRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaConnectionEventBadRequestBody media connection event bad request body
swagger:model MediaConnectionEventBadRequestBody
*/
type MediaConnectionEventBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaConnectionEventBadRequestBodyParams `json:"params"`
}

// Validate validates this media connection event bad request body
func (o *MediaConnectionEventBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionEventBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionEventBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaConnectionEventBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionEventBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaConnectionEventBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionEventBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionEventBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaConnectionEventBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionEventBadRequestBodyParams media connection event bad request body params
swagger:model MediaConnectionEventBadRequestBodyParams
*/
type MediaConnectionEventBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaConnectionEventBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media connection event bad request body params
func (o *MediaConnectionEventBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionEventBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionEventBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaConnectionEventBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionEventBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionEventBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaConnectionEventBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionEventBadRequestBodyParamsErrorsItems0 media connection event bad request body params errors items0
swagger:model MediaConnectionEventBadRequestBodyParamsErrorsItems0
*/
type MediaConnectionEventBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media connection event bad request body params errors items0
func (o *MediaConnectionEventBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionEventBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionEventBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaConnectionEventBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
