// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// MediaRtcpDeleteReader is a Reader for the MediaRtcpDelete structure.
type MediaRtcpDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaRtcpDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewMediaRtcpDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaRtcpDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMediaRtcpDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMediaRtcpDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaRtcpDeleteMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaRtcpDeleteNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaRtcpDeleteRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaRtcpDeleteNoContent creates a MediaRtcpDeleteNoContent with default headers values
func NewMediaRtcpDeleteNoContent() *MediaRtcpDeleteNoContent {
	return &MediaRtcpDeleteNoContent{}
}

/*MediaRtcpDeleteNoContent handles this case with default header values.

No Content
*/
type MediaRtcpDeleteNoContent struct {
}

func (o *MediaRtcpDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /media/rtcp/{rtcp_id}][%d] mediaRtcpDeleteNoContent ", 204)
}

func (o *MediaRtcpDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRtcpDeleteBadRequest creates a MediaRtcpDeleteBadRequest with default headers values
func NewMediaRtcpDeleteBadRequest() *MediaRtcpDeleteBadRequest {
	return &MediaRtcpDeleteBadRequest{}
}

/*MediaRtcpDeleteBadRequest handles this case with default header values.

Invalid input
*/
type MediaRtcpDeleteBadRequest struct {
	Payload *MediaRtcpDeleteBadRequestBody
}

func (o *MediaRtcpDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /media/rtcp/{rtcp_id}][%d] mediaRtcpDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *MediaRtcpDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaRtcpDeleteBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaRtcpDeleteForbidden creates a MediaRtcpDeleteForbidden with default headers values
func NewMediaRtcpDeleteForbidden() *MediaRtcpDeleteForbidden {
	return &MediaRtcpDeleteForbidden{}
}

/*MediaRtcpDeleteForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type MediaRtcpDeleteForbidden struct {
}

func (o *MediaRtcpDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /media/rtcp/{rtcp_id}][%d] mediaRtcpDeleteForbidden ", 403)
}

func (o *MediaRtcpDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRtcpDeleteNotFound creates a MediaRtcpDeleteNotFound with default headers values
func NewMediaRtcpDeleteNotFound() *MediaRtcpDeleteNotFound {
	return &MediaRtcpDeleteNotFound{}
}

/*MediaRtcpDeleteNotFound handles this case with default header values.

Not Found(media_idが間違っている場合)
*/
type MediaRtcpDeleteNotFound struct {
}

func (o *MediaRtcpDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /media/rtcp/{rtcp_id}][%d] mediaRtcpDeleteNotFound ", 404)
}

func (o *MediaRtcpDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRtcpDeleteMethodNotAllowed creates a MediaRtcpDeleteMethodNotAllowed with default headers values
func NewMediaRtcpDeleteMethodNotAllowed() *MediaRtcpDeleteMethodNotAllowed {
	return &MediaRtcpDeleteMethodNotAllowed{}
}

/*MediaRtcpDeleteMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaRtcpDeleteMethodNotAllowed struct {
}

func (o *MediaRtcpDeleteMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /media/rtcp/{rtcp_id}][%d] mediaRtcpDeleteMethodNotAllowed ", 405)
}

func (o *MediaRtcpDeleteMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRtcpDeleteNotAcceptable creates a MediaRtcpDeleteNotAcceptable with default headers values
func NewMediaRtcpDeleteNotAcceptable() *MediaRtcpDeleteNotAcceptable {
	return &MediaRtcpDeleteNotAcceptable{}
}

/*MediaRtcpDeleteNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaRtcpDeleteNotAcceptable struct {
}

func (o *MediaRtcpDeleteNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /media/rtcp/{rtcp_id}][%d] mediaRtcpDeleteNotAcceptable ", 406)
}

func (o *MediaRtcpDeleteNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRtcpDeleteRequestTimeout creates a MediaRtcpDeleteRequestTimeout with default headers values
func NewMediaRtcpDeleteRequestTimeout() *MediaRtcpDeleteRequestTimeout {
	return &MediaRtcpDeleteRequestTimeout{}
}

/*MediaRtcpDeleteRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaRtcpDeleteRequestTimeout struct {
}

func (o *MediaRtcpDeleteRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /media/rtcp/{rtcp_id}][%d] mediaRtcpDeleteRequestTimeout ", 408)
}

func (o *MediaRtcpDeleteRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaRtcpDeleteBadRequestBody media rtcp delete bad request body
swagger:model MediaRtcpDeleteBadRequestBody
*/
type MediaRtcpDeleteBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaRtcpDeleteBadRequestBodyParams `json:"params"`
}

// Validate validates this media rtcp delete bad request body
func (o *MediaRtcpDeleteBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaRtcpDeleteBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaRtcpDeleteBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaRtcpDeleteBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaRtcpDeleteBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaRtcpDeleteBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaRtcpDeleteBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaRtcpDeleteBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaRtcpDeleteBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaRtcpDeleteBadRequestBodyParams media rtcp delete bad request body params
swagger:model MediaRtcpDeleteBadRequestBodyParams
*/
type MediaRtcpDeleteBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaRtcpDeleteBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media rtcp delete bad request body params
func (o *MediaRtcpDeleteBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaRtcpDeleteBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaRtcpDeleteBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaRtcpDeleteBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaRtcpDeleteBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaRtcpDeleteBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaRtcpDeleteBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaRtcpDeleteBadRequestBodyParamsErrorsItems0 media rtcp delete bad request body params errors items0
swagger:model MediaRtcpDeleteBadRequestBodyParamsErrorsItems0
*/
type MediaRtcpDeleteBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media rtcp delete bad request body params errors items0
func (o *MediaRtcpDeleteBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaRtcpDeleteBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaRtcpDeleteBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaRtcpDeleteBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
