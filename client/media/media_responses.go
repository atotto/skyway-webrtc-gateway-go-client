// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// MediaReader is a Reader for the Media structure.
type MediaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewMediaCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaCreated creates a MediaCreated with default headers values
func NewMediaCreated() *MediaCreated {
	return &MediaCreated{}
}

/*MediaCreated handles this case with default header values.

successful operation
*/
type MediaCreated struct {
	Payload *models.MediaParameters
}

func (o *MediaCreated) Error() string {
	return fmt.Sprintf("[POST /media][%d] mediaCreated  %+v", 201, o.Payload)
}

func (o *MediaCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MediaParameters)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaBadRequest creates a MediaBadRequest with default headers values
func NewMediaBadRequest() *MediaBadRequest {
	return &MediaBadRequest{}
}

/*MediaBadRequest handles this case with default header values.

Invalid input
*/
type MediaBadRequest struct {
	Payload *MediaBadRequestBody
}

func (o *MediaBadRequest) Error() string {
	return fmt.Sprintf("[POST /media][%d] mediaBadRequest  %+v", 400, o.Payload)
}

func (o *MediaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaMethodNotAllowed creates a MediaMethodNotAllowed with default headers values
func NewMediaMethodNotAllowed() *MediaMethodNotAllowed {
	return &MediaMethodNotAllowed{}
}

/*MediaMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaMethodNotAllowed struct {
}

func (o *MediaMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /media][%d] mediaMethodNotAllowed ", 405)
}

func (o *MediaMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaNotAcceptable creates a MediaNotAcceptable with default headers values
func NewMediaNotAcceptable() *MediaNotAcceptable {
	return &MediaNotAcceptable{}
}

/*MediaNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaNotAcceptable struct {
}

func (o *MediaNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /media][%d] mediaNotAcceptable ", 406)
}

func (o *MediaNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRequestTimeout creates a MediaRequestTimeout with default headers values
func NewMediaRequestTimeout() *MediaRequestTimeout {
	return &MediaRequestTimeout{}
}

/*MediaRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaRequestTimeout struct {
}

func (o *MediaRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /media][%d] mediaRequestTimeout ", 408)
}

func (o *MediaRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaBadRequestBody media bad request body
swagger:model MediaBadRequestBody
*/
type MediaBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaBadRequestBodyParams `json:"params"`
}

// Validate validates this media bad request body
func (o *MediaBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaBadRequestBodyParams media bad request body params
swagger:model MediaBadRequestBodyParams
*/
type MediaBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media bad request body params
func (o *MediaBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaBadRequestBodyParamsErrorsItems0 media bad request body params errors items0
swagger:model MediaBadRequestBodyParamsErrorsItems0
*/
type MediaBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media bad request body params errors items0
func (o *MediaBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
