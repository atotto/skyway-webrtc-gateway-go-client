// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// MediaConnectionAnswerReader is a Reader for the MediaConnectionAnswer structure.
type MediaConnectionAnswerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaConnectionAnswerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewMediaConnectionAnswerAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaConnectionAnswerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMediaConnectionAnswerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMediaConnectionAnswerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaConnectionAnswerMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaConnectionAnswerNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaConnectionAnswerRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaConnectionAnswerAccepted creates a MediaConnectionAnswerAccepted with default headers values
func NewMediaConnectionAnswerAccepted() *MediaConnectionAnswerAccepted {
	return &MediaConnectionAnswerAccepted{}
}

/*MediaConnectionAnswerAccepted handles this case with default header values.

Accepted
*/
type MediaConnectionAnswerAccepted struct {
	Payload *models.MediaConnectionAnswerResponse
}

func (o *MediaConnectionAnswerAccepted) Error() string {
	return fmt.Sprintf("[POST /media/connections/{media_connection_id}/answer][%d] mediaConnectionAnswerAccepted  %+v", 202, o.Payload)
}

func (o *MediaConnectionAnswerAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MediaConnectionAnswerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionAnswerBadRequest creates a MediaConnectionAnswerBadRequest with default headers values
func NewMediaConnectionAnswerBadRequest() *MediaConnectionAnswerBadRequest {
	return &MediaConnectionAnswerBadRequest{}
}

/*MediaConnectionAnswerBadRequest handles this case with default header values.

Invalid input
*/
type MediaConnectionAnswerBadRequest struct {
	Payload *MediaConnectionAnswerBadRequestBody
}

func (o *MediaConnectionAnswerBadRequest) Error() string {
	return fmt.Sprintf("[POST /media/connections/{media_connection_id}/answer][%d] mediaConnectionAnswerBadRequest  %+v", 400, o.Payload)
}

func (o *MediaConnectionAnswerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaConnectionAnswerBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionAnswerForbidden creates a MediaConnectionAnswerForbidden with default headers values
func NewMediaConnectionAnswerForbidden() *MediaConnectionAnswerForbidden {
	return &MediaConnectionAnswerForbidden{}
}

/*MediaConnectionAnswerForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type MediaConnectionAnswerForbidden struct {
}

func (o *MediaConnectionAnswerForbidden) Error() string {
	return fmt.Sprintf("[POST /media/connections/{media_connection_id}/answer][%d] mediaConnectionAnswerForbidden ", 403)
}

func (o *MediaConnectionAnswerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionAnswerNotFound creates a MediaConnectionAnswerNotFound with default headers values
func NewMediaConnectionAnswerNotFound() *MediaConnectionAnswerNotFound {
	return &MediaConnectionAnswerNotFound{}
}

/*MediaConnectionAnswerNotFound handles this case with default header values.

Not Found(media_connection_idが間違っている場合)
*/
type MediaConnectionAnswerNotFound struct {
}

func (o *MediaConnectionAnswerNotFound) Error() string {
	return fmt.Sprintf("[POST /media/connections/{media_connection_id}/answer][%d] mediaConnectionAnswerNotFound ", 404)
}

func (o *MediaConnectionAnswerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionAnswerMethodNotAllowed creates a MediaConnectionAnswerMethodNotAllowed with default headers values
func NewMediaConnectionAnswerMethodNotAllowed() *MediaConnectionAnswerMethodNotAllowed {
	return &MediaConnectionAnswerMethodNotAllowed{}
}

/*MediaConnectionAnswerMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaConnectionAnswerMethodNotAllowed struct {
}

func (o *MediaConnectionAnswerMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /media/connections/{media_connection_id}/answer][%d] mediaConnectionAnswerMethodNotAllowed ", 405)
}

func (o *MediaConnectionAnswerMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionAnswerNotAcceptable creates a MediaConnectionAnswerNotAcceptable with default headers values
func NewMediaConnectionAnswerNotAcceptable() *MediaConnectionAnswerNotAcceptable {
	return &MediaConnectionAnswerNotAcceptable{}
}

/*MediaConnectionAnswerNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaConnectionAnswerNotAcceptable struct {
}

func (o *MediaConnectionAnswerNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /media/connections/{media_connection_id}/answer][%d] mediaConnectionAnswerNotAcceptable ", 406)
}

func (o *MediaConnectionAnswerNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionAnswerRequestTimeout creates a MediaConnectionAnswerRequestTimeout with default headers values
func NewMediaConnectionAnswerRequestTimeout() *MediaConnectionAnswerRequestTimeout {
	return &MediaConnectionAnswerRequestTimeout{}
}

/*MediaConnectionAnswerRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaConnectionAnswerRequestTimeout struct {
}

func (o *MediaConnectionAnswerRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /media/connections/{media_connection_id}/answer][%d] mediaConnectionAnswerRequestTimeout ", 408)
}

func (o *MediaConnectionAnswerRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaConnectionAnswerBadRequestBody media connection answer bad request body
swagger:model MediaConnectionAnswerBadRequestBody
*/
type MediaConnectionAnswerBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaConnectionAnswerBadRequestBodyParams `json:"params"`
}

// Validate validates this media connection answer bad request body
func (o *MediaConnectionAnswerBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionAnswerBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionAnswerBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaConnectionAnswerBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionAnswerBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaConnectionAnswerBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionAnswerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionAnswerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaConnectionAnswerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionAnswerBadRequestBodyParams media connection answer bad request body params
swagger:model MediaConnectionAnswerBadRequestBodyParams
*/
type MediaConnectionAnswerBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaConnectionAnswerBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media connection answer bad request body params
func (o *MediaConnectionAnswerBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionAnswerBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionAnswerBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaConnectionAnswerBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionAnswerBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionAnswerBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaConnectionAnswerBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionAnswerBadRequestBodyParamsErrorsItems0 media connection answer bad request body params errors items0
swagger:model MediaConnectionAnswerBadRequestBodyParamsErrorsItems0
*/
type MediaConnectionAnswerBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media connection answer bad request body params errors items0
func (o *MediaConnectionAnswerBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionAnswerBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionAnswerBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaConnectionAnswerBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
