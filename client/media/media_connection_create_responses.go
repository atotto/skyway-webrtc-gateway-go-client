// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// MediaConnectionCreateReader is a Reader for the MediaConnectionCreate structure.
type MediaConnectionCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaConnectionCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewMediaConnectionCreateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaConnectionCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMediaConnectionCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMediaConnectionCreateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaConnectionCreateMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaConnectionCreateNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaConnectionCreateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaConnectionCreateAccepted creates a MediaConnectionCreateAccepted with default headers values
func NewMediaConnectionCreateAccepted() *MediaConnectionCreateAccepted {
	return &MediaConnectionCreateAccepted{}
}

/*MediaConnectionCreateAccepted handles this case with default header values.

Accepted
*/
type MediaConnectionCreateAccepted struct {
	Payload *models.PeerCallResponse
}

func (o *MediaConnectionCreateAccepted) Error() string {
	return fmt.Sprintf("[POST /media/connections][%d] mediaConnectionCreateAccepted  %+v", 202, o.Payload)
}

func (o *MediaConnectionCreateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PeerCallResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionCreateBadRequest creates a MediaConnectionCreateBadRequest with default headers values
func NewMediaConnectionCreateBadRequest() *MediaConnectionCreateBadRequest {
	return &MediaConnectionCreateBadRequest{}
}

/*MediaConnectionCreateBadRequest handles this case with default header values.

Invalid input
*/
type MediaConnectionCreateBadRequest struct {
	Payload *MediaConnectionCreateBadRequestBody
}

func (o *MediaConnectionCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /media/connections][%d] mediaConnectionCreateBadRequest  %+v", 400, o.Payload)
}

func (o *MediaConnectionCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaConnectionCreateBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionCreateForbidden creates a MediaConnectionCreateForbidden with default headers values
func NewMediaConnectionCreateForbidden() *MediaConnectionCreateForbidden {
	return &MediaConnectionCreateForbidden{}
}

/*MediaConnectionCreateForbidden handles this case with default header values.

Forbidden(tokenが間違っている場合)
*/
type MediaConnectionCreateForbidden struct {
}

func (o *MediaConnectionCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /media/connections][%d] mediaConnectionCreateForbidden ", 403)
}

func (o *MediaConnectionCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCreateNotFound creates a MediaConnectionCreateNotFound with default headers values
func NewMediaConnectionCreateNotFound() *MediaConnectionCreateNotFound {
	return &MediaConnectionCreateNotFound{}
}

/*MediaConnectionCreateNotFound handles this case with default header values.

Not Found(peer_idが間違っている場合)
*/
type MediaConnectionCreateNotFound struct {
}

func (o *MediaConnectionCreateNotFound) Error() string {
	return fmt.Sprintf("[POST /media/connections][%d] mediaConnectionCreateNotFound ", 404)
}

func (o *MediaConnectionCreateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCreateMethodNotAllowed creates a MediaConnectionCreateMethodNotAllowed with default headers values
func NewMediaConnectionCreateMethodNotAllowed() *MediaConnectionCreateMethodNotAllowed {
	return &MediaConnectionCreateMethodNotAllowed{}
}

/*MediaConnectionCreateMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaConnectionCreateMethodNotAllowed struct {
}

func (o *MediaConnectionCreateMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /media/connections][%d] mediaConnectionCreateMethodNotAllowed ", 405)
}

func (o *MediaConnectionCreateMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCreateNotAcceptable creates a MediaConnectionCreateNotAcceptable with default headers values
func NewMediaConnectionCreateNotAcceptable() *MediaConnectionCreateNotAcceptable {
	return &MediaConnectionCreateNotAcceptable{}
}

/*MediaConnectionCreateNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaConnectionCreateNotAcceptable struct {
}

func (o *MediaConnectionCreateNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /media/connections][%d] mediaConnectionCreateNotAcceptable ", 406)
}

func (o *MediaConnectionCreateNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCreateRequestTimeout creates a MediaConnectionCreateRequestTimeout with default headers values
func NewMediaConnectionCreateRequestTimeout() *MediaConnectionCreateRequestTimeout {
	return &MediaConnectionCreateRequestTimeout{}
}

/*MediaConnectionCreateRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaConnectionCreateRequestTimeout struct {
}

func (o *MediaConnectionCreateRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /media/connections][%d] mediaConnectionCreateRequestTimeout ", 408)
}

func (o *MediaConnectionCreateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaConnectionCreateBadRequestBody media connection create bad request body
swagger:model MediaConnectionCreateBadRequestBody
*/
type MediaConnectionCreateBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaConnectionCreateBadRequestBodyParams `json:"params"`
}

// Validate validates this media connection create bad request body
func (o *MediaConnectionCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionCreateBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionCreateBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaConnectionCreateBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionCreateBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaConnectionCreateBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionCreateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionCreateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaConnectionCreateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionCreateBadRequestBodyParams media connection create bad request body params
swagger:model MediaConnectionCreateBadRequestBodyParams
*/
type MediaConnectionCreateBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaConnectionCreateBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media connection create bad request body params
func (o *MediaConnectionCreateBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionCreateBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionCreateBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaConnectionCreateBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionCreateBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionCreateBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaConnectionCreateBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionCreateBadRequestBodyParamsErrorsItems0 media connection create bad request body params errors items0
swagger:model MediaConnectionCreateBadRequestBodyParamsErrorsItems0
*/
type MediaConnectionCreateBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media connection create bad request body params errors items0
func (o *MediaConnectionCreateBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionCreateBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionCreateBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaConnectionCreateBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
