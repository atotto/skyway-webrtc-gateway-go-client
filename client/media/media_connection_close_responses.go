// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// MediaConnectionCloseReader is a Reader for the MediaConnectionClose structure.
type MediaConnectionCloseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaConnectionCloseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewMediaConnectionCloseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaConnectionCloseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMediaConnectionCloseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMediaConnectionCloseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaConnectionCloseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaConnectionCloseNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaConnectionCloseRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaConnectionCloseNoContent creates a MediaConnectionCloseNoContent with default headers values
func NewMediaConnectionCloseNoContent() *MediaConnectionCloseNoContent {
	return &MediaConnectionCloseNoContent{}
}

/*MediaConnectionCloseNoContent handles this case with default header values.

No Content
*/
type MediaConnectionCloseNoContent struct {
}

func (o *MediaConnectionCloseNoContent) Error() string {
	return fmt.Sprintf("[DELETE /media/connections/{media_connection_id}][%d] mediaConnectionCloseNoContent ", 204)
}

func (o *MediaConnectionCloseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCloseBadRequest creates a MediaConnectionCloseBadRequest with default headers values
func NewMediaConnectionCloseBadRequest() *MediaConnectionCloseBadRequest {
	return &MediaConnectionCloseBadRequest{}
}

/*MediaConnectionCloseBadRequest handles this case with default header values.

Invalid input
*/
type MediaConnectionCloseBadRequest struct {
	Payload *MediaConnectionCloseBadRequestBody
}

func (o *MediaConnectionCloseBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /media/connections/{media_connection_id}][%d] mediaConnectionCloseBadRequest  %+v", 400, o.Payload)
}

func (o *MediaConnectionCloseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaConnectionCloseBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionCloseForbidden creates a MediaConnectionCloseForbidden with default headers values
func NewMediaConnectionCloseForbidden() *MediaConnectionCloseForbidden {
	return &MediaConnectionCloseForbidden{}
}

/*MediaConnectionCloseForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type MediaConnectionCloseForbidden struct {
}

func (o *MediaConnectionCloseForbidden) Error() string {
	return fmt.Sprintf("[DELETE /media/connections/{media_connection_id}][%d] mediaConnectionCloseForbidden ", 403)
}

func (o *MediaConnectionCloseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCloseNotFound creates a MediaConnectionCloseNotFound with default headers values
func NewMediaConnectionCloseNotFound() *MediaConnectionCloseNotFound {
	return &MediaConnectionCloseNotFound{}
}

/*MediaConnectionCloseNotFound handles this case with default header values.

Not Found(media_connection_idが間違っている場合)
*/
type MediaConnectionCloseNotFound struct {
}

func (o *MediaConnectionCloseNotFound) Error() string {
	return fmt.Sprintf("[DELETE /media/connections/{media_connection_id}][%d] mediaConnectionCloseNotFound ", 404)
}

func (o *MediaConnectionCloseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCloseMethodNotAllowed creates a MediaConnectionCloseMethodNotAllowed with default headers values
func NewMediaConnectionCloseMethodNotAllowed() *MediaConnectionCloseMethodNotAllowed {
	return &MediaConnectionCloseMethodNotAllowed{}
}

/*MediaConnectionCloseMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaConnectionCloseMethodNotAllowed struct {
}

func (o *MediaConnectionCloseMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /media/connections/{media_connection_id}][%d] mediaConnectionCloseMethodNotAllowed ", 405)
}

func (o *MediaConnectionCloseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCloseNotAcceptable creates a MediaConnectionCloseNotAcceptable with default headers values
func NewMediaConnectionCloseNotAcceptable() *MediaConnectionCloseNotAcceptable {
	return &MediaConnectionCloseNotAcceptable{}
}

/*MediaConnectionCloseNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaConnectionCloseNotAcceptable struct {
}

func (o *MediaConnectionCloseNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /media/connections/{media_connection_id}][%d] mediaConnectionCloseNotAcceptable ", 406)
}

func (o *MediaConnectionCloseNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionCloseRequestTimeout creates a MediaConnectionCloseRequestTimeout with default headers values
func NewMediaConnectionCloseRequestTimeout() *MediaConnectionCloseRequestTimeout {
	return &MediaConnectionCloseRequestTimeout{}
}

/*MediaConnectionCloseRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaConnectionCloseRequestTimeout struct {
}

func (o *MediaConnectionCloseRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /media/connections/{media_connection_id}][%d] mediaConnectionCloseRequestTimeout ", 408)
}

func (o *MediaConnectionCloseRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaConnectionCloseBadRequestBody media connection close bad request body
swagger:model MediaConnectionCloseBadRequestBody
*/
type MediaConnectionCloseBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaConnectionCloseBadRequestBodyParams `json:"params"`
}

// Validate validates this media connection close bad request body
func (o *MediaConnectionCloseBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionCloseBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionCloseBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaConnectionCloseBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionCloseBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaConnectionCloseBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionCloseBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionCloseBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaConnectionCloseBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionCloseBadRequestBodyParams media connection close bad request body params
swagger:model MediaConnectionCloseBadRequestBodyParams
*/
type MediaConnectionCloseBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaConnectionCloseBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media connection close bad request body params
func (o *MediaConnectionCloseBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionCloseBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionCloseBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaConnectionCloseBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionCloseBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionCloseBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaConnectionCloseBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionCloseBadRequestBodyParamsErrorsItems0 media connection close bad request body params errors items0
swagger:model MediaConnectionCloseBadRequestBodyParamsErrorsItems0
*/
type MediaConnectionCloseBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media connection close bad request body params errors items0
func (o *MediaConnectionCloseBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionCloseBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionCloseBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaConnectionCloseBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
