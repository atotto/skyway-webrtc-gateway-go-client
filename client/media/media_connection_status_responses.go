// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// MediaConnectionStatusReader is a Reader for the MediaConnectionStatus structure.
type MediaConnectionStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaConnectionStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewMediaConnectionStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaConnectionStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMediaConnectionStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMediaConnectionStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaConnectionStatusMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaConnectionStatusNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaConnectionStatusRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaConnectionStatusOK creates a MediaConnectionStatusOK with default headers values
func NewMediaConnectionStatusOK() *MediaConnectionStatusOK {
	return &MediaConnectionStatusOK{}
}

/*MediaConnectionStatusOK handles this case with default header values.

successful operation
*/
type MediaConnectionStatusOK struct {
	Payload *models.MediaConnectionStatusMessage
}

func (o *MediaConnectionStatusOK) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/status][%d] mediaConnectionStatusOK  %+v", 200, o.Payload)
}

func (o *MediaConnectionStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MediaConnectionStatusMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionStatusBadRequest creates a MediaConnectionStatusBadRequest with default headers values
func NewMediaConnectionStatusBadRequest() *MediaConnectionStatusBadRequest {
	return &MediaConnectionStatusBadRequest{}
}

/*MediaConnectionStatusBadRequest handles this case with default header values.

Invalid input
*/
type MediaConnectionStatusBadRequest struct {
	Payload *MediaConnectionStatusBadRequestBody
}

func (o *MediaConnectionStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/status][%d] mediaConnectionStatusBadRequest  %+v", 400, o.Payload)
}

func (o *MediaConnectionStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaConnectionStatusBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaConnectionStatusForbidden creates a MediaConnectionStatusForbidden with default headers values
func NewMediaConnectionStatusForbidden() *MediaConnectionStatusForbidden {
	return &MediaConnectionStatusForbidden{}
}

/*MediaConnectionStatusForbidden handles this case with default header values.

Forbidden(不正な操作を行った場合)
*/
type MediaConnectionStatusForbidden struct {
}

func (o *MediaConnectionStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/status][%d] mediaConnectionStatusForbidden ", 403)
}

func (o *MediaConnectionStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionStatusNotFound creates a MediaConnectionStatusNotFound with default headers values
func NewMediaConnectionStatusNotFound() *MediaConnectionStatusNotFound {
	return &MediaConnectionStatusNotFound{}
}

/*MediaConnectionStatusNotFound handles this case with default header values.

Not Found(media_connection_idが間違っている場合)
*/
type MediaConnectionStatusNotFound struct {
}

func (o *MediaConnectionStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/status][%d] mediaConnectionStatusNotFound ", 404)
}

func (o *MediaConnectionStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionStatusMethodNotAllowed creates a MediaConnectionStatusMethodNotAllowed with default headers values
func NewMediaConnectionStatusMethodNotAllowed() *MediaConnectionStatusMethodNotAllowed {
	return &MediaConnectionStatusMethodNotAllowed{}
}

/*MediaConnectionStatusMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaConnectionStatusMethodNotAllowed struct {
}

func (o *MediaConnectionStatusMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/status][%d] mediaConnectionStatusMethodNotAllowed ", 405)
}

func (o *MediaConnectionStatusMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionStatusNotAcceptable creates a MediaConnectionStatusNotAcceptable with default headers values
func NewMediaConnectionStatusNotAcceptable() *MediaConnectionStatusNotAcceptable {
	return &MediaConnectionStatusNotAcceptable{}
}

/*MediaConnectionStatusNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaConnectionStatusNotAcceptable struct {
}

func (o *MediaConnectionStatusNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/status][%d] mediaConnectionStatusNotAcceptable ", 406)
}

func (o *MediaConnectionStatusNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaConnectionStatusRequestTimeout creates a MediaConnectionStatusRequestTimeout with default headers values
func NewMediaConnectionStatusRequestTimeout() *MediaConnectionStatusRequestTimeout {
	return &MediaConnectionStatusRequestTimeout{}
}

/*MediaConnectionStatusRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaConnectionStatusRequestTimeout struct {
}

func (o *MediaConnectionStatusRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /media/connections/{media_connection_id}/status][%d] mediaConnectionStatusRequestTimeout ", 408)
}

func (o *MediaConnectionStatusRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaConnectionStatusBadRequestBody media connection status bad request body
swagger:model MediaConnectionStatusBadRequestBody
*/
type MediaConnectionStatusBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaConnectionStatusBadRequestBodyParams `json:"params"`
}

// Validate validates this media connection status bad request body
func (o *MediaConnectionStatusBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionStatusBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionStatusBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaConnectionStatusBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionStatusBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaConnectionStatusBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionStatusBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionStatusBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaConnectionStatusBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionStatusBadRequestBodyParams media connection status bad request body params
swagger:model MediaConnectionStatusBadRequestBodyParams
*/
type MediaConnectionStatusBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaConnectionStatusBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media connection status bad request body params
func (o *MediaConnectionStatusBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaConnectionStatusBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaConnectionStatusBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaConnectionStatusBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionStatusBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionStatusBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaConnectionStatusBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaConnectionStatusBadRequestBodyParamsErrorsItems0 media connection status bad request body params errors items0
swagger:model MediaConnectionStatusBadRequestBodyParamsErrorsItems0
*/
type MediaConnectionStatusBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media connection status bad request body params errors items0
func (o *MediaConnectionStatusBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaConnectionStatusBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaConnectionStatusBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaConnectionStatusBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
