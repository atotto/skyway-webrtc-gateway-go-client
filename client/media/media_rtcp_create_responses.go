// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// MediaRtcpCreateReader is a Reader for the MediaRtcpCreate structure.
type MediaRtcpCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaRtcpCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewMediaRtcpCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMediaRtcpCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMediaRtcpCreateMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewMediaRtcpCreateNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewMediaRtcpCreateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMediaRtcpCreateCreated creates a MediaRtcpCreateCreated with default headers values
func NewMediaRtcpCreateCreated() *MediaRtcpCreateCreated {
	return &MediaRtcpCreateCreated{}
}

/*MediaRtcpCreateCreated handles this case with default header values.

successful operation
*/
type MediaRtcpCreateCreated struct {
	Payload *models.MediaRtcpParameters
}

func (o *MediaRtcpCreateCreated) Error() string {
	return fmt.Sprintf("[POST /media/rtcp][%d] mediaRtcpCreateCreated  %+v", 201, o.Payload)
}

func (o *MediaRtcpCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MediaRtcpParameters)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaRtcpCreateBadRequest creates a MediaRtcpCreateBadRequest with default headers values
func NewMediaRtcpCreateBadRequest() *MediaRtcpCreateBadRequest {
	return &MediaRtcpCreateBadRequest{}
}

/*MediaRtcpCreateBadRequest handles this case with default header values.

Invalid input
*/
type MediaRtcpCreateBadRequest struct {
	Payload *MediaRtcpCreateBadRequestBody
}

func (o *MediaRtcpCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /media/rtcp][%d] mediaRtcpCreateBadRequest  %+v", 400, o.Payload)
}

func (o *MediaRtcpCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MediaRtcpCreateBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMediaRtcpCreateMethodNotAllowed creates a MediaRtcpCreateMethodNotAllowed with default headers values
func NewMediaRtcpCreateMethodNotAllowed() *MediaRtcpCreateMethodNotAllowed {
	return &MediaRtcpCreateMethodNotAllowed{}
}

/*MediaRtcpCreateMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type MediaRtcpCreateMethodNotAllowed struct {
}

func (o *MediaRtcpCreateMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /media/rtcp][%d] mediaRtcpCreateMethodNotAllowed ", 405)
}

func (o *MediaRtcpCreateMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRtcpCreateNotAcceptable creates a MediaRtcpCreateNotAcceptable with default headers values
func NewMediaRtcpCreateNotAcceptable() *MediaRtcpCreateNotAcceptable {
	return &MediaRtcpCreateNotAcceptable{}
}

/*MediaRtcpCreateNotAcceptable handles this case with default header values.

Not Acceptable
*/
type MediaRtcpCreateNotAcceptable struct {
}

func (o *MediaRtcpCreateNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /media/rtcp][%d] mediaRtcpCreateNotAcceptable ", 406)
}

func (o *MediaRtcpCreateNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRtcpCreateRequestTimeout creates a MediaRtcpCreateRequestTimeout with default headers values
func NewMediaRtcpCreateRequestTimeout() *MediaRtcpCreateRequestTimeout {
	return &MediaRtcpCreateRequestTimeout{}
}

/*MediaRtcpCreateRequestTimeout handles this case with default header values.

Request Timeout
*/
type MediaRtcpCreateRequestTimeout struct {
}

func (o *MediaRtcpCreateRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /media/rtcp][%d] mediaRtcpCreateRequestTimeout ", 408)
}

func (o *MediaRtcpCreateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*MediaRtcpCreateBadRequestBody media rtcp create bad request body
swagger:model MediaRtcpCreateBadRequestBody
*/
type MediaRtcpCreateBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *MediaRtcpCreateBadRequestBodyParams `json:"params"`
}

// Validate validates this media rtcp create bad request body
func (o *MediaRtcpCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaRtcpCreateBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("mediaRtcpCreateBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *MediaRtcpCreateBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("mediaRtcpCreateBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mediaRtcpCreateBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaRtcpCreateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaRtcpCreateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res MediaRtcpCreateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaRtcpCreateBadRequestBodyParams media rtcp create bad request body params
swagger:model MediaRtcpCreateBadRequestBodyParams
*/
type MediaRtcpCreateBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*MediaRtcpCreateBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this media rtcp create bad request body params
func (o *MediaRtcpCreateBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MediaRtcpCreateBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("mediaRtcpCreateBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mediaRtcpCreateBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MediaRtcpCreateBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaRtcpCreateBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res MediaRtcpCreateBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MediaRtcpCreateBadRequestBodyParamsErrorsItems0 media rtcp create bad request body params errors items0
swagger:model MediaRtcpCreateBadRequestBodyParamsErrorsItems0
*/
type MediaRtcpCreateBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this media rtcp create bad request body params errors items0
func (o *MediaRtcpCreateBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MediaRtcpCreateBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MediaRtcpCreateBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res MediaRtcpCreateBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
