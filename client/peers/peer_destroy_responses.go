// Code generated by go-swagger; DO NOT EDIT.

package peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PeerDestroyReader is a Reader for the PeerDestroy structure.
type PeerDestroyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PeerDestroyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPeerDestroyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPeerDestroyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPeerDestroyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPeerDestroyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPeerDestroyMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewPeerDestroyNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewPeerDestroyRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPeerDestroyNoContent creates a PeerDestroyNoContent with default headers values
func NewPeerDestroyNoContent() *PeerDestroyNoContent {
	return &PeerDestroyNoContent{}
}

/*PeerDestroyNoContent handles this case with default header values.

No Content
*/
type PeerDestroyNoContent struct {
}

func (o *PeerDestroyNoContent) Error() string {
	return fmt.Sprintf("[DELETE /peers/{peer_id}][%d] peerDestroyNoContent ", 204)
}

func (o *PeerDestroyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerDestroyBadRequest creates a PeerDestroyBadRequest with default headers values
func NewPeerDestroyBadRequest() *PeerDestroyBadRequest {
	return &PeerDestroyBadRequest{}
}

/*PeerDestroyBadRequest handles this case with default header values.

Invalid input
*/
type PeerDestroyBadRequest struct {
	Payload *PeerDestroyBadRequestBody
}

func (o *PeerDestroyBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /peers/{peer_id}][%d] peerDestroyBadRequest  %+v", 400, o.Payload)
}

func (o *PeerDestroyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PeerDestroyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerDestroyForbidden creates a PeerDestroyForbidden with default headers values
func NewPeerDestroyForbidden() *PeerDestroyForbidden {
	return &PeerDestroyForbidden{}
}

/*PeerDestroyForbidden handles this case with default header values.

Forbidden(key, domainが間違っている場合)
*/
type PeerDestroyForbidden struct {
}

func (o *PeerDestroyForbidden) Error() string {
	return fmt.Sprintf("[DELETE /peers/{peer_id}][%d] peerDestroyForbidden ", 403)
}

func (o *PeerDestroyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerDestroyNotFound creates a PeerDestroyNotFound with default headers values
func NewPeerDestroyNotFound() *PeerDestroyNotFound {
	return &PeerDestroyNotFound{}
}

/*PeerDestroyNotFound handles this case with default header values.

Not Found(peer_idが間違っている場合)
*/
type PeerDestroyNotFound struct {
}

func (o *PeerDestroyNotFound) Error() string {
	return fmt.Sprintf("[DELETE /peers/{peer_id}][%d] peerDestroyNotFound ", 404)
}

func (o *PeerDestroyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerDestroyMethodNotAllowed creates a PeerDestroyMethodNotAllowed with default headers values
func NewPeerDestroyMethodNotAllowed() *PeerDestroyMethodNotAllowed {
	return &PeerDestroyMethodNotAllowed{}
}

/*PeerDestroyMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type PeerDestroyMethodNotAllowed struct {
}

func (o *PeerDestroyMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /peers/{peer_id}][%d] peerDestroyMethodNotAllowed ", 405)
}

func (o *PeerDestroyMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerDestroyNotAcceptable creates a PeerDestroyNotAcceptable with default headers values
func NewPeerDestroyNotAcceptable() *PeerDestroyNotAcceptable {
	return &PeerDestroyNotAcceptable{}
}

/*PeerDestroyNotAcceptable handles this case with default header values.

Not Acceptable
*/
type PeerDestroyNotAcceptable struct {
}

func (o *PeerDestroyNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /peers/{peer_id}][%d] peerDestroyNotAcceptable ", 406)
}

func (o *PeerDestroyNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerDestroyRequestTimeout creates a PeerDestroyRequestTimeout with default headers values
func NewPeerDestroyRequestTimeout() *PeerDestroyRequestTimeout {
	return &PeerDestroyRequestTimeout{}
}

/*PeerDestroyRequestTimeout handles this case with default header values.

Request Timeout
*/
type PeerDestroyRequestTimeout struct {
}

func (o *PeerDestroyRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /peers/{peer_id}][%d] peerDestroyRequestTimeout ", 408)
}

func (o *PeerDestroyRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PeerDestroyBadRequestBody peer destroy bad request body
swagger:model PeerDestroyBadRequestBody
*/
type PeerDestroyBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *PeerDestroyBadRequestBodyParams `json:"params"`
}

// Validate validates this peer destroy bad request body
func (o *PeerDestroyBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerDestroyBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("peerDestroyBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *PeerDestroyBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("peerDestroyBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerDestroyBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerDestroyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerDestroyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PeerDestroyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerDestroyBadRequestBodyParams peer destroy bad request body params
swagger:model PeerDestroyBadRequestBodyParams
*/
type PeerDestroyBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*PeerDestroyBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this peer destroy bad request body params
func (o *PeerDestroyBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerDestroyBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("peerDestroyBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peerDestroyBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerDestroyBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerDestroyBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res PeerDestroyBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerDestroyBadRequestBodyParamsErrorsItems0 peer destroy bad request body params errors items0
swagger:model PeerDestroyBadRequestBodyParamsErrorsItems0
*/
type PeerDestroyBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this peer destroy bad request body params errors items0
func (o *PeerDestroyBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PeerDestroyBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerDestroyBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PeerDestroyBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
