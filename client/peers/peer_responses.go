// Code generated by go-swagger; DO NOT EDIT.

package peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// PeerReader is a Reader for the Peer structure.
type PeerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PeerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPeerCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPeerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPeerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPeerMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewPeerNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewPeerRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPeerCreated creates a PeerCreated with default headers values
func NewPeerCreated() *PeerCreated {
	return &PeerCreated{}
}

/*PeerCreated handles this case with default header values.

Created
*/
type PeerCreated struct {
	Payload *models.PeerResponse
}

func (o *PeerCreated) Error() string {
	return fmt.Sprintf("[POST /peers][%d] peerCreated  %+v", 201, o.Payload)
}

func (o *PeerCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PeerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerBadRequest creates a PeerBadRequest with default headers values
func NewPeerBadRequest() *PeerBadRequest {
	return &PeerBadRequest{}
}

/*PeerBadRequest handles this case with default header values.

Invalid input
*/
type PeerBadRequest struct {
	Payload *PeerBadRequestBody
}

func (o *PeerBadRequest) Error() string {
	return fmt.Sprintf("[POST /peers][%d] peerBadRequest  %+v", 400, o.Payload)
}

func (o *PeerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PeerBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerForbidden creates a PeerForbidden with default headers values
func NewPeerForbidden() *PeerForbidden {
	return &PeerForbidden{}
}

/*PeerForbidden handles this case with default header values.

Forbidden(key, domainが間違っている場合)
*/
type PeerForbidden struct {
}

func (o *PeerForbidden) Error() string {
	return fmt.Sprintf("[POST /peers][%d] peerForbidden ", 403)
}

func (o *PeerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerMethodNotAllowed creates a PeerMethodNotAllowed with default headers values
func NewPeerMethodNotAllowed() *PeerMethodNotAllowed {
	return &PeerMethodNotAllowed{}
}

/*PeerMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type PeerMethodNotAllowed struct {
}

func (o *PeerMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /peers][%d] peerMethodNotAllowed ", 405)
}

func (o *PeerMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerNotAcceptable creates a PeerNotAcceptable with default headers values
func NewPeerNotAcceptable() *PeerNotAcceptable {
	return &PeerNotAcceptable{}
}

/*PeerNotAcceptable handles this case with default header values.

Not Acceptable
*/
type PeerNotAcceptable struct {
}

func (o *PeerNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /peers][%d] peerNotAcceptable ", 406)
}

func (o *PeerNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerRequestTimeout creates a PeerRequestTimeout with default headers values
func NewPeerRequestTimeout() *PeerRequestTimeout {
	return &PeerRequestTimeout{}
}

/*PeerRequestTimeout handles this case with default header values.

Request Timeout
*/
type PeerRequestTimeout struct {
}

func (o *PeerRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /peers][%d] peerRequestTimeout ", 408)
}

func (o *PeerRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PeerBadRequestBody peer bad request body
swagger:model PeerBadRequestBody
*/
type PeerBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *PeerBadRequestBodyParams `json:"params"`
}

// Validate validates this peer bad request body
func (o *PeerBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("peerBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *PeerBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("peerBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PeerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerBadRequestBodyParams peer bad request body params
swagger:model PeerBadRequestBodyParams
*/
type PeerBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*PeerBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this peer bad request body params
func (o *PeerBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("peerBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peerBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res PeerBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerBadRequestBodyParamsErrorsItems0 peer bad request body params errors items0
swagger:model PeerBadRequestBodyParamsErrorsItems0
*/
type PeerBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this peer bad request body params errors items0
func (o *PeerBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PeerBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PeerBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
