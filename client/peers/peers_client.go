// Code generated by go-swagger; DO NOT EDIT.

package peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new peers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for peers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Peer peerオブジェクトを生成しs sky wayサーバと接続します

Peerオブジェクトを生成し、SkyWayサーバと接続します。SkyWayサーバと正常に接続できた場合のみ201を返します
*/
func (a *Client) Peer(params *PeerParams) (*PeerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "peer",
		Method:             "POST",
		PathPattern:        "/peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PeerCreated), nil

}

/*
PeerCredentialUpdate peer認証のクレデンシャルを更新しますs

Peer認証のクレデンシャルを更新します。Peer認証機能が有効でなければ、クレデンシャルを更新する要求は無視されます。このとき、エラーイベントは発火しません
*/
func (a *Client) PeerCredentialUpdate(params *PeerCredentialUpdateParams) (*PeerCredentialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerCredentialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "peer_credential_update",
		Method:             "PUT",
		PathPattern:        "/peers/{peer_id}/credential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerCredentialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PeerCredentialUpdateOK), nil

}

/*
PeerDestroy peerオブジェクトの開放処理を行いますs

Peerオブジェクトを開放し、関連する全てのWebRTCセッションとデータ受け渡しのためのUDPポートをクローズします
*/
func (a *Client) PeerDestroy(params *PeerDestroyParams) (*PeerDestroyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerDestroyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "peer_destroy",
		Method:             "DELETE",
		PathPattern:        "/peers/{peer_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerDestroyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PeerDestroyNoContent), nil

}

/*
PeerEvent peerオブジェクトからイベントを取得するのに利用しますs

Long Pollでイベントを監視するのに利用します。連続でイベントが発火する場合があるため常に監視するようにしてください
*/
func (a *Client) PeerEvent(params *PeerEventParams) (*PeerEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "peer_event",
		Method:             "GET",
		PathPattern:        "/peers/{peer_id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PeerEventOK), nil

}

/*
PeerStatus peerオブジェクトの状態を取得しますs

Peerオブジェクトの状態を取得します
*/
func (a *Client) PeerStatus(params *PeerStatusParams) (*PeerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "peer_status",
		Method:             "GET",
		PathPattern:        "/peers/{peer_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PeerStatusOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
