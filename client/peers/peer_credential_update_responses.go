// Code generated by go-swagger; DO NOT EDIT.

package peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// PeerCredentialUpdateReader is a Reader for the PeerCredentialUpdate structure.
type PeerCredentialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PeerCredentialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPeerCredentialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPeerCredentialUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPeerCredentialUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPeerCredentialUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPeerCredentialUpdateOK creates a PeerCredentialUpdateOK with default headers values
func NewPeerCredentialUpdateOK() *PeerCredentialUpdateOK {
	return &PeerCredentialUpdateOK{}
}

/*PeerCredentialUpdateOK handles this case with default header values.

Ok
*/
type PeerCredentialUpdateOK struct {
	Payload *PeerCredentialUpdateOKBody
}

func (o *PeerCredentialUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /peers/{peer_id}/credential][%d] peerCredentialUpdateOK  %+v", 200, o.Payload)
}

func (o *PeerCredentialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PeerCredentialUpdateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerCredentialUpdateBadRequest creates a PeerCredentialUpdateBadRequest with default headers values
func NewPeerCredentialUpdateBadRequest() *PeerCredentialUpdateBadRequest {
	return &PeerCredentialUpdateBadRequest{}
}

/*PeerCredentialUpdateBadRequest handles this case with default header values.

Invalid input
*/
type PeerCredentialUpdateBadRequest struct {
	Payload *PeerCredentialUpdateBadRequestBody
}

func (o *PeerCredentialUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /peers/{peer_id}/credential][%d] peerCredentialUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *PeerCredentialUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PeerCredentialUpdateBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerCredentialUpdateForbidden creates a PeerCredentialUpdateForbidden with default headers values
func NewPeerCredentialUpdateForbidden() *PeerCredentialUpdateForbidden {
	return &PeerCredentialUpdateForbidden{}
}

/*PeerCredentialUpdateForbidden handles this case with default header values.

Forbidden(tokenが間違っている場合)
*/
type PeerCredentialUpdateForbidden struct {
}

func (o *PeerCredentialUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /peers/{peer_id}/credential][%d] peerCredentialUpdateForbidden ", 403)
}

func (o *PeerCredentialUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerCredentialUpdateNotFound creates a PeerCredentialUpdateNotFound with default headers values
func NewPeerCredentialUpdateNotFound() *PeerCredentialUpdateNotFound {
	return &PeerCredentialUpdateNotFound{}
}

/*PeerCredentialUpdateNotFound handles this case with default header values.

Not Found(peer_idが間違っている場合)
*/
type PeerCredentialUpdateNotFound struct {
}

func (o *PeerCredentialUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /peers/{peer_id}/credential][%d] peerCredentialUpdateNotFound ", 404)
}

func (o *PeerCredentialUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PeerCredentialUpdateBadRequestBody peer credential update bad request body
swagger:model PeerCredentialUpdateBadRequestBody
*/
type PeerCredentialUpdateBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *PeerCredentialUpdateBadRequestBodyParams `json:"params"`
}

// Validate validates this peer credential update bad request body
func (o *PeerCredentialUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerCredentialUpdateBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("peerCredentialUpdateBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *PeerCredentialUpdateBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("peerCredentialUpdateBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerCredentialUpdateBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerCredentialUpdateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerCredentialUpdateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PeerCredentialUpdateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerCredentialUpdateBadRequestBodyParams peer credential update bad request body params
swagger:model PeerCredentialUpdateBadRequestBodyParams
*/
type PeerCredentialUpdateBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*PeerCredentialUpdateBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this peer credential update bad request body params
func (o *PeerCredentialUpdateBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerCredentialUpdateBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("peerCredentialUpdateBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peerCredentialUpdateBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerCredentialUpdateBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerCredentialUpdateBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res PeerCredentialUpdateBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerCredentialUpdateBadRequestBodyParamsErrorsItems0 peer credential update bad request body params errors items0
swagger:model PeerCredentialUpdateBadRequestBodyParamsErrorsItems0
*/
type PeerCredentialUpdateBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this peer credential update bad request body params errors items0
func (o *PeerCredentialUpdateBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PeerCredentialUpdateBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerCredentialUpdateBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PeerCredentialUpdateBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerCredentialUpdateOKBody peer credential update o k body
swagger:model PeerCredentialUpdateOKBody
*/
type PeerCredentialUpdateOKBody struct {

	// command type
	CommandType string `json:"command_type,omitempty"`

	// params
	Params *PeerCredentialUpdateOKBodyParams `json:"params,omitempty"`
}

// Validate validates this peer credential update o k body
func (o *PeerCredentialUpdateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerCredentialUpdateOKBody) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerCredentialUpdateOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerCredentialUpdateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerCredentialUpdateOKBody) UnmarshalBinary(b []byte) error {
	var res PeerCredentialUpdateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerCredentialUpdateOKBodyParams peer credential update o k body params
swagger:model PeerCredentialUpdateOKBodyParams
*/
type PeerCredentialUpdateOKBodyParams struct {

	// credential
	Credential *models.PeerCredential `json:"credential,omitempty"`
}

// Validate validates this peer credential update o k body params
func (o *PeerCredentialUpdateOKBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerCredentialUpdateOKBodyParams) validateCredential(formats strfmt.Registry) error {

	if swag.IsZero(o.Credential) { // not required
		return nil
	}

	if o.Credential != nil {
		if err := o.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerCredentialUpdateOK" + "." + "params" + "." + "credential")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerCredentialUpdateOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerCredentialUpdateOKBodyParams) UnmarshalBinary(b []byte) error {
	var res PeerCredentialUpdateOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
