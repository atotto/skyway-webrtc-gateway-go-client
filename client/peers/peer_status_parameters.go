// Code generated by go-swagger; DO NOT EDIT.

package peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPeerStatusParams creates a new PeerStatusParams object
// with the default values initialized.
func NewPeerStatusParams() *PeerStatusParams {
	var ()
	return &PeerStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPeerStatusParamsWithTimeout creates a new PeerStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPeerStatusParamsWithTimeout(timeout time.Duration) *PeerStatusParams {
	var ()
	return &PeerStatusParams{

		timeout: timeout,
	}
}

// NewPeerStatusParamsWithContext creates a new PeerStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewPeerStatusParamsWithContext(ctx context.Context) *PeerStatusParams {
	var ()
	return &PeerStatusParams{

		Context: ctx,
	}
}

// NewPeerStatusParamsWithHTTPClient creates a new PeerStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPeerStatusParamsWithHTTPClient(client *http.Client) *PeerStatusParams {
	var ()
	return &PeerStatusParams{
		HTTPClient: client,
	}
}

/*PeerStatusParams contains all the parameters to send to the API endpoint
for the peer status operation typically these are written to a http.Request
*/
type PeerStatusParams struct {

	/*PeerID
	  接続対象のPeerのidを指定します

	*/
	PeerID string
	/*Token
	  Peerオブジェクトを利用するために必要なトークンです。他のユーザのリソースに対する誤操作防止のために指定します

	*/
	Token string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the peer status params
func (o *PeerStatusParams) WithTimeout(timeout time.Duration) *PeerStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the peer status params
func (o *PeerStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the peer status params
func (o *PeerStatusParams) WithContext(ctx context.Context) *PeerStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the peer status params
func (o *PeerStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the peer status params
func (o *PeerStatusParams) WithHTTPClient(client *http.Client) *PeerStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the peer status params
func (o *PeerStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPeerID adds the peerID to the peer status params
func (o *PeerStatusParams) WithPeerID(peerID string) *PeerStatusParams {
	o.SetPeerID(peerID)
	return o
}

// SetPeerID adds the peerId to the peer status params
func (o *PeerStatusParams) SetPeerID(peerID string) {
	o.PeerID = peerID
}

// WithToken adds the token to the peer status params
func (o *PeerStatusParams) WithToken(token string) *PeerStatusParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the peer status params
func (o *PeerStatusParams) SetToken(token string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *PeerStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param peer_id
	if err := r.SetPathParam("peer_id", o.PeerID); err != nil {
		return err
	}

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {
		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
