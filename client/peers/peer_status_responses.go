// Code generated by go-swagger; DO NOT EDIT.

package peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atotto/skyway-webrtc-gateway-go-client/models"
)

// PeerStatusReader is a Reader for the PeerStatus structure.
type PeerStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PeerStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPeerStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPeerStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPeerStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPeerStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPeerStatusMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewPeerStatusNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewPeerStatusRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPeerStatusOK creates a PeerStatusOK with default headers values
func NewPeerStatusOK() *PeerStatusOK {
	return &PeerStatusOK{}
}

/*PeerStatusOK handles this case with default header values.

successful operation
*/
type PeerStatusOK struct {
	Payload *models.PeerStatusMessage
}

func (o *PeerStatusOK) Error() string {
	return fmt.Sprintf("[GET /peers/{peer_id}/status][%d] peerStatusOK  %+v", 200, o.Payload)
}

func (o *PeerStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PeerStatusMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerStatusBadRequest creates a PeerStatusBadRequest with default headers values
func NewPeerStatusBadRequest() *PeerStatusBadRequest {
	return &PeerStatusBadRequest{}
}

/*PeerStatusBadRequest handles this case with default header values.

Invalid input
*/
type PeerStatusBadRequest struct {
	Payload *PeerStatusBadRequestBody
}

func (o *PeerStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /peers/{peer_id}/status][%d] peerStatusBadRequest  %+v", 400, o.Payload)
}

func (o *PeerStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PeerStatusBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerStatusForbidden creates a PeerStatusForbidden with default headers values
func NewPeerStatusForbidden() *PeerStatusForbidden {
	return &PeerStatusForbidden{}
}

/*PeerStatusForbidden handles this case with default header values.

Forbidden(tokenが間違っている場合)
*/
type PeerStatusForbidden struct {
}

func (o *PeerStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /peers/{peer_id}/status][%d] peerStatusForbidden ", 403)
}

func (o *PeerStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerStatusNotFound creates a PeerStatusNotFound with default headers values
func NewPeerStatusNotFound() *PeerStatusNotFound {
	return &PeerStatusNotFound{}
}

/*PeerStatusNotFound handles this case with default header values.

Not Found(peer_idが間違っている場合)
*/
type PeerStatusNotFound struct {
}

func (o *PeerStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /peers/{peer_id}/status][%d] peerStatusNotFound ", 404)
}

func (o *PeerStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerStatusMethodNotAllowed creates a PeerStatusMethodNotAllowed with default headers values
func NewPeerStatusMethodNotAllowed() *PeerStatusMethodNotAllowed {
	return &PeerStatusMethodNotAllowed{}
}

/*PeerStatusMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type PeerStatusMethodNotAllowed struct {
}

func (o *PeerStatusMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /peers/{peer_id}/status][%d] peerStatusMethodNotAllowed ", 405)
}

func (o *PeerStatusMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerStatusNotAcceptable creates a PeerStatusNotAcceptable with default headers values
func NewPeerStatusNotAcceptable() *PeerStatusNotAcceptable {
	return &PeerStatusNotAcceptable{}
}

/*PeerStatusNotAcceptable handles this case with default header values.

Not Acceptable
*/
type PeerStatusNotAcceptable struct {
}

func (o *PeerStatusNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /peers/{peer_id}/status][%d] peerStatusNotAcceptable ", 406)
}

func (o *PeerStatusNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPeerStatusRequestTimeout creates a PeerStatusRequestTimeout with default headers values
func NewPeerStatusRequestTimeout() *PeerStatusRequestTimeout {
	return &PeerStatusRequestTimeout{}
}

/*PeerStatusRequestTimeout handles this case with default header values.

Request Timeout
*/
type PeerStatusRequestTimeout struct {
}

func (o *PeerStatusRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /peers/{peer_id}/status][%d] peerStatusRequestTimeout ", 408)
}

func (o *PeerStatusRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PeerStatusBadRequestBody peer status bad request body
swagger:model PeerStatusBadRequestBody
*/
type PeerStatusBadRequestBody struct {

	// command type
	// Required: true
	CommandType *string `json:"command_type"`

	// params
	// Required: true
	Params *PeerStatusBadRequestBodyParams `json:"params"`
}

// Validate validates this peer status bad request body
func (o *PeerStatusBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommandType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerStatusBadRequestBody) validateCommandType(formats strfmt.Registry) error {

	if err := validate.Required("peerStatusBadRequest"+"."+"command_type", "body", o.CommandType); err != nil {
		return err
	}

	return nil
}

func (o *PeerStatusBadRequestBody) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("peerStatusBadRequest"+"."+"params", "body", o.Params); err != nil {
		return err
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerStatusBadRequest" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerStatusBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerStatusBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PeerStatusBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerStatusBadRequestBodyParams peer status bad request body params
swagger:model PeerStatusBadRequestBodyParams
*/
type PeerStatusBadRequestBodyParams struct {

	// errors
	// Required: true
	Errors []*PeerStatusBadRequestBodyParamsErrorsItems0 `json:"errors"`
}

// Validate validates this peer status bad request body params
func (o *PeerStatusBadRequestBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PeerStatusBadRequestBodyParams) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("peerStatusBadRequest"+"."+"params"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peerStatusBadRequest" + "." + "params" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PeerStatusBadRequestBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerStatusBadRequestBodyParams) UnmarshalBinary(b []byte) error {
	var res PeerStatusBadRequestBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeerStatusBadRequestBodyParamsErrorsItems0 peer status bad request body params errors items0
swagger:model PeerStatusBadRequestBodyParamsErrorsItems0
*/
type PeerStatusBadRequestBodyParamsErrorsItems0 struct {

	// field
	Field string `json:"field,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this peer status bad request body params errors items0
func (o *PeerStatusBadRequestBodyParamsErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PeerStatusBadRequestBodyParamsErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeerStatusBadRequestBodyParamsErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PeerStatusBadRequestBodyParamsErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
